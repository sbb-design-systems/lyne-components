@use '../core/styles' as sbb;

// Box-sizing rules contained in typography are not traversing Shadow DOM boundaries. We need to include box-sizing mixin in every component.
@include sbb.box-sizing;

:host {
  display: block;

  // We add width definition to host, to make overwriting easy for consumers.
  width: max-content;

  --sbb-calendar-cell-size: #{sbb.px-to-rem-build(40)};
  --sbb-calendar-hover-shift: #{sbb.px-to-rem-build(1)};
  --sbb-calendar-wide-cell-size: #{sbb.px-to-rem-build(70)};
  --sbb-calendar-cell-disabled-color: var(--sbb-color-granite);
  --sbb-calendar-header-color: var(--sbb-color-granite);
  --sbb-calendar-cell-background-color: transparent;
  --sbb-calendar-cell-padding: #{sbb.px-to-rem-build(2)};
  --sbb-calendar-cell-color: var(--sbb-color-charcoal);
  --sbb-calendar-cell-selected-color: var(--sbb-color-white);
  --sbb-calendar-cell-selected-background-color: var(--sbb-color-charcoal);
  --sbb-calendar-cell-disabled-height: #{sbb.px-to-rem-build(1.5)};
  --sbb-calendar-cell-disabled-width: #{sbb.px-to-rem-build(25.5)};
  --sbb-calendar-cell-transition-duration: var(
    --sbb-disable-animation-duration,
    var(--sbb-animation-duration-2x)
  );
  --sbb-calendar-cell-transition-easing-function: var(--sbb-animation-easing);
  --sbb-calendar-tables-gap: var(--sbb-spacing-fixed-10x);
  --sbb-calendar-table-animation-shift: #{sbb.px-to-rem-build(0.1)};

  // While changing views, there would be a few frames where the height of the calendar collapses to just
  // the height of the controls and then grow back to the height of the next view.
  // By using 0.1ms this can be avoided.
  --sbb-calendar-table-animation-duration: 0.1ms;
  --sbb-calendar-table-column-spaces: 12;
  --sbb-calendar-control-view-change-height: #{sbb.px-to-rem-build(44)};
  --sbb-calendar-control-view-change-color: var(--sbb-color-charcoal);
  --sbb-calendar-control-view-change-background: var(--sbb-color-white);

  @include sbb.mq($from: micro) {
    --sbb-calendar-cell-size: #{sbb.px-to-rem-build(44)};
    --sbb-calendar-wide-cell-size: #{sbb.px-to-rem-build(77)};
    --sbb-calendar-control-view-change-height: #{sbb.px-to-rem-build(48)};
  }
}

.sbb-calendar__wrapper {
  width: 100%;
  display: block;
  transition-duration: var(--sbb-calendar-cell-transition-duration);
}

.sbb-calendar__controls {
  width: 100%;
  display: inline-flex;
  align-items: center;
  gap: var(--sbb-spacing-fixed-2x);
  margin-block-end: var(--sbb-spacing-fixed-4x);
}

.sbb-calendar__controls-month {
  width: 100%;
  display: flex;
  gap: var(--sbb-calendar-tables-gap);
}

#sbb-calendar__controls-previous,
#sbb-calendar__controls-next {
  -webkit-tap-highlight-color: transparent;
}

.sbb-calendar__controls-change-date {
  @include sbb.button-reset;
  @include sbb.text-s--regular;

  display: flex;
  align-items: center;
  margin: auto;
  height: var(--sbb-calendar-control-view-change-height);
  text-transform: capitalize;
  cursor: pointer;
  padding-inline: var(--sbb-spacing-fixed-5x) var(--sbb-spacing-fixed-2x);
  border-radius: var(--sbb-border-radius-infinity);
  background-color: var(--sbb-calendar-control-view-change-background);
  color: var(--sbb-calendar-control-view-change-color);
  transition-duration: var(--sbb-calendar-cell-transition-duration);
  transition-timing-function: var(--sbb-calendar-cell-transition-easing-function);
  transition-property: background-color, padding-block-end;

  &:disabled {
    --sbb-calendar-control-view-change-background: var(--sbb-color-milk);
    --sbb-calendar-control-view-change-color: var(--sbb-calendar-cell-disabled-color);

    cursor: unset;
  }

  &:focus-visible:not([data-focus-origin='mouse'], [data-focus-origin='touch']) {
    @include sbb.focus-outline;

    outline-offset: var(--sbb-spacing-fixed-1x);
  }

  @include sbb.hover-mq {
    &:not(:active, :disabled):hover {
      padding-block-end: var(--sbb-calendar-hover-shift);
    }
  }

  &:not(:disabled):active {
    --sbb-calendar-control-view-change-background: var(--sbb-color-milk);
  }
}

.sbb-calendar__table-month-view,
.sbb-calendar__table-year-view {
  --sbb-calendar-table-column-spaces: 6;
}

.sbb-calendar__table-container {
  display: flex;
  gap: var(--sbb-calendar-tables-gap);
  margin-inline: var(--sbb-calendar-margin);

  // The padding of the first and last column should not be visible if calendar is stretched.
  // Therefore we need a negative inline margin.
  // As we don't want to squeeze, the margin should never be greater than zero.

  // Min width is equals to the normal width of the calendar
  --sbb-calendar-min-width: calc(7 * var(--sbb-calendar-cell-size));

  // The overflow variable is equals the difference between the actual width and the min width.
  --sbb-calendar-overflow: calc(100% - var(--sbb-calendar-min-width));

  // The start offset is negative margin which should overlap the parent container. Should never be a positive value.
  --sbb-calendar-start-offset: min(
    0px,
    -1 * (var(--sbb-calendar-overflow) / var(--sbb-calendar-table-column-spaces))
  );
  --sbb-calendar-margin: var(--sbb-calendar-start-offset);

  :host([data-wide]) & {
    --sbb-calendar-min-width: calc(
      2 * 7 * var(--sbb-calendar-cell-size) + var(--sbb-calendar-tables-gap)
    );
    --sbb-calendar-margin: calc(0.5 * var(--sbb-calendar-start-offset));
  }

  // The container's min-width is set in vertical mode;
  // the value `calc(7 * var(--sbb-calendar-cell-size))` is fine
  // considering that the maximum number of weeks in a month is 6, plus 1 for the header at the table's left side.
  :host([orientation='vertical']) & {
    min-width: var(--sbb-calendar-min-width);

    // The variable that defines the margin is set to 0 to correctly display the table if consumers set a custom width.
    --sbb-calendar-start-offset: 0;
  }

  // The min-width in wide is calculated as (max number of weeks in a month) * (displayed months) + (header column) = 6 * 2 + 1 = 13.
  :host([orientation='vertical'][data-wide]) & {
    --sbb-calendar-min-width: calc(
      13 * var(--sbb-calendar-cell-size) + var(--sbb-calendar-tables-gap)
    );
  }
}

.sbb-calendar__table {
  width: 100%;
  border-collapse: collapse;
  height: max-content;

  animation: {
    name: show;
    duration: var(--sbb-calendar-table-animation-duration);
  }

  &.sbb-calendar__table-hide {
    --sbb-calendar-cell-transition-duration: 0ms;

    animation: {
      name: hide;
      duration: var(--sbb-calendar-table-animation-duration);
    }
  }

  :host(:not([data-wide])) & {
    // Due to a Safari iOS rendering bug we need to define min-width as well.
    // Otherwise, after orientation change, there is a wrong width if placed in an sbb-dialog.
    min-width: 100%;
  }
}

.sbb-calendar__table-header {
  @include sbb.text-xs--regular;

  color: var(--sbb-calendar-header-color);
  width: var(--sbb-calendar-cell-size);
  padding: 0;

  // Depending where in the DOM it's used, it's possible that browser defaults set text-align to left.
  text-align: center;

  :host([orientation='horizontal']) & {
    padding-block-end: var(--sbb-spacing-fixed-4x);
  }

  :host([orientation='vertical']) & {
    padding-inline-end: var(--sbb-spacing-fixed-1x);
  }
}

.sbb-calendar__table-data {
  position: relative;
  padding: 0;
  text-align: center;
}

.sbb-calendar__cell {
  @include sbb.button-reset;
  @include sbb.text-s--regular;

  height: var(--sbb-calendar-cell-size);
  color: var(--sbb-calendar-cell-color);
  cursor: pointer;
  position: relative;
  z-index: 0;

  &::before {
    content: '';
    position: absolute;
    inset: var(--sbb-calendar-cell-padding);
    background-color: var(--sbb-calendar-cell-background-color);
    border-radius: 50%;
    z-index: -1;
    transition-duration: var(--sbb-calendar-cell-transition-duration);
    transition-timing-function: var(--sbb-calendar-cell-transition-easing-function);
    transition-property: background-color;
  }

  @include sbb.hover-mq($hover: true) {
    &:not(.sbb-calendar__selected, :active, :disabled):hover {
      --sbb-calendar-cell-background-color: var(--sbb-color-milk);

      padding-block-end: var(--sbb-calendar-hover-shift);

      &::before {
        @include sbb.if-forced-colors {
          @include sbb.focus-outline;
        }
      }
    }
  }

  &:disabled {
    --sbb-calendar-cell-color: var(--sbb-calendar-cell-disabled-color);

    cursor: unset;
  }

  &:focus-visible::before {
    @include sbb.focus-outline;
  }

  &:not(.sbb-calendar__selected, :disabled):active {
    --sbb-calendar-cell-background-color: var(--sbb-color-cloud);

    &::before {
      @include sbb.if-forced-colors {
        @include sbb.focus-outline;
      }
    }
  }
}

.sbb-calendar__day {
  border-radius: 50%;
  width: var(--sbb-calendar-cell-size);

  &::before {
    border-radius: 50%;
  }
}

.sbb-calendar__pill {
  width: var(--sbb-calendar-wide-cell-size);
  border-radius: var(--sbb-border-radius-infinity);

  &::before {
    border-radius: var(--sbb-border-radius-infinity);
  }
}

.sbb-calendar__crossed-out::after {
  content: '';
  height: var(--sbb-calendar-cell-disabled-height);
  width: var(--sbb-calendar-cell-disabled-width);
  position: absolute;
  background-color: var(--sbb-calendar-cell-disabled-color);
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) rotate(-45deg);
}

.sbb-calendar__cell-current {
  @include sbb.text-s--bold;
}

.sbb-calendar__selected {
  --sbb-calendar-cell-color: var(--sbb-calendar-cell-selected-color);
  --sbb-calendar-cell-background-color: var(--sbb-calendar-cell-selected-background-color);

  @include sbb.if-forced-colors {
    --sbb-calendar-cell-background-color: ButtonText !important;
  }
}

@keyframes show {
  from {
    opacity: 0;
    transform: translateY(var(--sbb-calendar-table-animation-shift));
  }

  to {
    opacity: 1;
    transform: translateY(0%);
  }
}

@keyframes hide {
  from {
    opacity: 1;
    transform: translateY(0%);
  }

  to {
    opacity: 0;
    transform: translateY(var(--sbb-calendar-table-animation-shift));
  }
}
