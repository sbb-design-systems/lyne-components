@use '../core/styles' as sbb;

// Box-sizing rules contained in typography are not traversing Shadow DOM boundaries. We need to include box-sizing mixin in every component.
@include sbb.box-sizing;

:host {
  display: block;

  --sbb-footer-gap-horizontal: var(--sbb-grid-base-gutter-responsive);
  --sbb-footer-gap-vertical: var(--sbb-spacing-responsive-l);
  --sbb-footer-background-color: var(--sbb-color-milk);
  --sbb-footer-clock-width: #{sbb.px-to-rem-build(76)};
  --sbb-footer-color: var(--sbb-color-granite);
  --sbb-link-text-decoration-line: none;

  @include sbb.mq($from: small) {
    --sbb-footer-clock-width: #{sbb.px-to-rem-build(112)};
  }
}

:host([negative]) {
  --sbb-footer-background-color: var(--sbb-color-charcoal);
  --sbb-footer-color: var(--sbb-color-white);
  --sbb-focus-outline-color: var(--sbb-focus-outline-color-dark);
}

.sbb-footer {
  // Include text style and color as fallback for paragraph texts inside the footer.
  @include sbb.text-s--regular;

  color: var(--sbb-footer-color);
  padding-block: var(--sbb-spacing-responsive-l);
  background-color: var(--sbb-footer-background-color);

  @include sbb.if-forced-colors {
    border-block-start: var(--sbb-border-width-1x) solid CanvasText;
  }
}

.sbb-footer-wrapper {
  :host(:not([expanded])) & {
    @include sbb.page-spacing;
  }

  :host([expanded]) & {
    @include sbb.page-spacing-expanded;
  }
}

.sbb-footer__title {
  @include sbb.screen-reader-only;
}

::slotted(.sbb-link-list-button-group) {
  display: flex;
  flex-direction: column;
  gap: var(--sbb-spacing-fixed-6x);
  align-items: flex-start;
}

:host([variant='clock-columns']) {
  // Content
  slot {
    display: grid;
    grid-template-columns: auto;
    grid-template-rows: auto;
    column-gap: var(--sbb-footer-gap-horizontal);

    @include sbb.mq($from: small) {
      grid-template-columns: calc(50% - (var(--sbb-footer-gap-horizontal) / 2));
    }

    @include sbb.mq($from: wide) {
      max-width: var(--sbb-footer-content-max-width);
      margin-inline: auto;
      grid-template-columns: repeat(4, 1fr);
    }
  }

  ::slotted(*:not(:last-child, sbb-divider)) {
    margin-block-end: var(--sbb-footer-gap-vertical);
  }

  ::slotted(sbb-clock) {
    width: var(--sbb-footer-clock-width);
    grid-row: 1;

    @include sbb.mq($from: small) {
      align-self: start;
      grid-row: 2;
    }

    @include sbb.mq($from: wide) {
      grid-row: 1;
      grid-column: 4 / 5;
      justify-self: end;
    }
  }

  ::slotted(sbb-divider) {
    margin-block: calc(var(--sbb-spacing-responsive-xl) - var(--sbb-footer-gap-vertical))
      var(--sbb-spacing-responsive-s);

    @include sbb.mq($from: small) {
      grid-row: 3;
      grid-column: 1 / 4;
      width: 100%;
    }

    @include sbb.mq($from: wide) {
      grid-row: 2;
    }
  }

  @include sbb.mq($from: small) {
    ::slotted(:nth-child(-n + 2)) {
      grid-row: 1;
    }

    ::slotted(:nth-child(3)),
    ::slotted(:nth-child(4)) {
      grid-row: 2;
    }

    ::slotted(*:last-child) {
      grid-row: 4;
    }
  }

  @include sbb.mq($from: large) {
    ::slotted(*:last-child) {
      grid-column: 1 / 4;
    }
  }

  @include sbb.mq($from: wide) {
    ::slotted(:nth-child(-n + 4)) {
      grid-row: 1;
    }

    ::slotted(*:last-child) {
      grid-row: 3;
    }

    ::slotted(sbb-divider),
    ::slotted(*:last-child) {
      grid-column: 1 / 5;
    }
  }
}
