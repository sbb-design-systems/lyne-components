@use '../core/styles' as sbb;

// Box-sizing rules contained in typography are not traversing Shadow DOM boundaries. We need to include box-sizing mixin in every component.
@include sbb.box-sizing;

:host {
  @include sbb.scrollbar-variables;

  --sbb-overlay-background-color: var(--sbb-background-color-3);
  --sbb-overlay-height: 100%;
  --sbb-overlay-inset: 0 auto auto 0;
  --sbb-overlay-padding-block: calc(var(--sbb-spacing-fixed-14x) + var(--sbb-spacing-responsive-l));
  --sbb-overlay-animation-duration: var(
    --sbb-disable-animation-duration,
    var(--sbb-animation-duration-6x)
  );
  --sbb-overlay-animation-easing: ease;
  --sbb-overlay-pointer-events: none;

  display: none;
  position: fixed;
  inset: var(--sbb-overlay-inset);
  z-index: var(--sbb-overlay-z-index, var(--sbb-overlay-default-z-index));
}

:host([data-state]:not([data-state='closed'])) {
  display: block;
}

:host(:is([data-state='opening'], [data-state='opened'])) {
  --sbb-overlay-pointer-events: all;
}

:host([negative]) {
  @include sbb.scrollbar-variables--color-negative;

  --sbb-focus-outline-color: var(--sbb-focus-outline-color-dark);
  --sbb-overlay-color: var(--sbb-color-white);
  --sbb-overlay-background-color: var(--sbb-background-color-1-negative);
}

:host(:not([data-state='closed'])) {
  --sbb-overlay-inset: 0;
}

.sbb-overlay__container {
  background-color: var(--sbb-overlay-background-color);
  pointer-events: var(--sbb-overlay-pointer-events);
  display: none;
  align-items: center;
  position: fixed;
  inset: var(--sbb-overlay-inset);

  :host([data-state]:not([data-state='closed'])) & {
    display: flex;
    animation: {
      name: open;
      duration: var(--sbb-overlay-animation-duration);
      timing-function: var(--sbb-overlay-animation-easing);
    }
  }

  :host([data-state][data-state='closing']) & {
    pointer-events: none;
    animation-name: close;
  }
}

.sbb-overlay {
  position: absolute;
  inset-inline: 0;
  margin: auto;
  padding: 0;
  border: none;
  height: var(--sbb-overlay-height);
  overflow: auto;
  color: var(--sbb-overlay-color);

  :host([data-state]:not([data-state='closed'])) & {
    animation: {
      name: open-move-in;
      duration: var(--sbb-overlay-animation-duration);
      timing-function: var(--sbb-overlay-animation-easing);
    }
  }

  :host([data-state][data-state='closing']) & {
    animation-name: close-move-out;
  }
}

.sbb-overlay__wrapper {
  display: flex;
  flex-direction: column;
  width: 100%;
  height: var(--sbb-overlay-height);
  outline: none;
  position: fixed;

  @include sbb.mq($from: medium) {
    position: sticky;
    inset-block-start: 0;
    height: auto;
  }
}

.sbb-overlay__header {
  position: absolute;
  inset-inline-start: 0;
  display: flex;
  pointer-events: none;
  align-items: start;
  justify-content: space-between;
  width: 100%;
  padding: var(--sbb-spacing-responsive-xs);
  padding-block-end: 0;
  z-index: 1;

  * {
    pointer-events: all;
  }
}

.sbb-overlay__close {
  margin-inline-start: auto;
}

.sbb-overlay__content {
  @include sbb.scrollbar-rules;

  & {
    height: 100vh;
    overflow: auto;
    -webkit-overflow-scrolling: touch;
  }
}

.sbb-overlay__content-container {
  padding-block: var(--sbb-overlay-padding-block);
}

// It is necessary to use animations with keyframes instead of transitions in order not to alter
// the default `display: block` of the modal otherwise it causes several problems,
// especially for accessibility.
@keyframes open {
  from {
    opacity: 0;
  }

  to {
    opacity: 1;
  }
}

@keyframes open-move-in {
  from {
    transform: translateY(var(--sbb-spacing-fixed-4x));
  }

  to {
    transform: translateY(0%);
  }
}

@keyframes close {
  from {
    opacity: 1;
  }

  to {
    opacity: 0;
  }
}

@keyframes close-move-out {
  from {
    transform: translateY(0%);
  }

  to {
    transform: translateY(var(--sbb-spacing-fixed-4x));
  }
}
