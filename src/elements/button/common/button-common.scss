@use '../../core/styles' as sbb;

// Box-sizing rules contained in typography are not traversing Shadow DOM boundaries. We need to include box-sizing mixin in every component.
@include sbb.box-sizing;

$icon-only: ':where([data-slot-names~=icon], [icon-name]):not([data-slot-names~=unnamed])';
$disabled: '[disabled], :disabled, [disabled-interactive]';
$active: ':active, [data-active]';

:host {
  display: inline-block;

  // Use !important here to not interfere with Firefox focus ring definition
  // which appears in normalize CSS of several frameworks.
  outline: none !important;

  --sbb-button-icon-size: var(--sbb-size-icon-ui-small);
  --sbb-button-shadow-1-offset-y: var(--sbb-shadow-elevation-level-3-shadow-1-offset-y);
  --sbb-button-shadow-2-offset-y: var(--sbb-shadow-elevation-level-3-shadow-2-offset-y);
  --sbb-button-shadow-1-blur: var(--sbb-shadow-elevation-level-3-shadow-1-blur);
  --sbb-button-shadow-2-blur: var(--sbb-shadow-elevation-level-3-shadow-2-blur);
  --sbb-button-color-disabled-background: var(--sbb-color-milk);
  --sbb-button-color-disabled-border: var(--sbb-color-smoke);
  --sbb-button-color-disabled-text: var(--sbb-color-granite);
  --sbb-button-border-disabled-style: dashed;
  --sbb-button-border-width: var(--sbb-border-width-2x);
  --sbb-button-border-disabled-width: var(--sbb-border-width-1x);
  --sbb-button-border-radius: var(--sbb-border-radius-infinity);
  --sbb-button-min-height: var(--sbb-size-element-m);
  --sbb-button-transition-duration: var(
    --sbb-disable-animation-duration,
    var(--sbb-animation-duration-2x)
  );
  --sbb-button-transition-easing-function: var(--sbb-animation-easing);
  --sbb-button-padding-block-min: var(--sbb-spacing-fixed-1x);
  --sbb-button-padding-inline: var(--sbb-spacing-fixed-8x);
  --sbb-button-gap: var(--sbb-spacing-fixed-2x);
  --sbb-button-box-shadow: transparent 0 0;
  --sbb-button-box-shadow-definition:
    var(--sbb-shadow-elevation-level-3-shadow-2-offset-x) var(--sbb-button-shadow-2-offset-y)
      var(--sbb-button-shadow-2-blur) var(--sbb-shadow-elevation-level-3-shadow-2-spread)
      var(--sbb-button-shadow-2-color),
    var(--sbb-shadow-elevation-level-3-shadow-1-offset-x) var(--sbb-button-shadow-1-offset-y)
      var(--sbb-button-shadow-1-blur) var(--sbb-shadow-elevation-level-3-shadow-1-spread)
      var(--sbb-button-shadow-1-color);

  // Calculated and private variables
  --_width: unset;
  --_border-color: var(--sbb-button-color-default-border);
  --_background-color: var(--sbb-button-color-default-background);
  --_color: var(--sbb-button-color-default-text);
  --_button-inset: 0;

  // The overlap-fix closes a small visual gap between border and background color when hovered.
  // As long as the border color corresponds to the background color, we slightly increase the border width.
  // This doesn't interfere with the content, but visually closes the small gap.
  // The secondary button itself can override it to 0 because it doesn't need the workaround.
  // We used px unit as it is not relative to anything.
  --_border: calc(var(--sbb-button-border-width) + var(--sbb-button-border-overlap-fix, 1px)) solid
    var(--_border-color);

  @include sbb.mq($from: medium) {
    --sbb-button-padding-inline: var(--sbb-spacing-fixed-10x);
  }

  @include sbb.if-forced-colors {
    --sbb-button-color-default-border: CanvasText !important;
    --sbb-button-color-active-border: Highlight !important;
    --sbb-button-color-default-background: Canvas !important;
    --sbb-button-color-hover-background: Canvas !important;
    --sbb-button-color-active-background: Canvas !important;
    --sbb-button-color-disabled-background: Canvas !important;
    --sbb-button-color-disabled-text: GrayText !important;

    // For static cases, button and link roles will override it.
    --sbb-button-color-default-text: CanvasText !important;
    --sbb-button-color-hover-text: CanvasText !important;
    --sbb-button-color-active-text: CanvasText !important;

    // Calculated and private variables
    --sbb-button-border-overlap-fix: 0rem;
  }
}

:host([data-button]) {
  @include sbb.if-forced-colors {
    --sbb-button-color-default-text: ButtonText !important;
    --sbb-button-color-hover-text: ButtonText !important;
    --sbb-button-color-active-text: ButtonText !important;
  }
}

:host([data-link]) {
  @include sbb.if-forced-colors {
    --sbb-button-color-default-text: LinkText !important;
    --sbb-button-color-hover-text: LinkText !important;
    --sbb-button-color-active-text: LinkText !important;
  }
}

:host([negative]) {
  --sbb-button-color-disabled-background: var(--sbb-color-charcoal);
  --sbb-button-color-disabled-text: var(--sbb-color-aluminium);
}

:host([size='m']) {
  --sbb-button-min-height: var(--sbb-size-element-s);
  --sbb-button-padding-inline: var(--sbb-spacing-fixed-5x);

  @include sbb.mq($from: medium) {
    --sbb-button-padding-inline: var(--sbb-spacing-fixed-8x);
  }
}

:host([size='s']) {
  --sbb-button-min-height: var(--sbb-size-element-xs);
  --sbb-button-padding-inline: var(--sbb-spacing-fixed-4x);
  --sbb-button-gap: var(--sbb-spacing-fixed-1x);

  @include sbb.mq($from: medium) {
    --sbb-button-padding-inline: var(--sbb-spacing-fixed-5x);
  }
}

:host(#{$icon-only}) {
  --sbb-button-padding-inline: 0;
  --_width: var(--sbb-button-min-height);
}

:host(:not(#{$disabled}, #{$active}):hover) {
  @include sbb.hover-mq($hover: true) {
    --sbb-button-translate-y-content-hover: #{sbb.px-to-rem-build(-1)};
    --sbb-button-shadow-1-offset-y: calc(
      0.5 * var(--sbb-shadow-elevation-level-3-shadow-1-offset-y)
    );
    --sbb-button-shadow-1-blur: calc(0.5 * var(--sbb-shadow-elevation-level-3-shadow-1-blur));
    --sbb-button-shadow-2-blur: calc(0.5 * var(--sbb-shadow-elevation-level-3-shadow-2-blur));
    --sbb-button-cursor: pointer;
    --_border-color: var(--sbb-button-color-hover-border);
    --_color: var(--sbb-button-color-hover-text);
    --_background-color: var(--sbb-button-color-hover-background);
    --_button-inset: calc(var(--sbb-button-border-width) * -1);
  }

  @include sbb.if-forced-colors {
    --sbb-button-color-hover-border: Highlight !important;
  }
}

// Disabled styles
:host(:is(#{$disabled})) {
  --sbb-button-cursor: default;
  --_color: var(--sbb-button-color-disabled-text);
  --_background-color: var(--sbb-button-color-disabled-background);
  --_border-color: var(--sbb-button-color-disabled-border);
  --_border: var(--sbb-button-border-disabled-width) var(--sbb-button-border-disabled-style)
    var(--_border-color);
}

// Active styles
:host(:not(#{$disabled}):is(#{$active})) {
  --_color: var(--sbb-button-color-active-text);
  --_background-color: var(--sbb-button-color-active-background);
  --_border-color: var(--sbb-button-color-active-border);
}

.sbb-action-base {
  @include sbb.text-xs--bold;

  display: flex;
  gap: var(--sbb-button-gap);
  align-items: center;
  justify-content: center;
  text-align: left;
  white-space: nowrap;
  text-decoration: none;
  min-height: var(--sbb-button-min-height);
  outline: none;

  // Width is set in icon-only variant
  width: var(--_width);
  border-radius: var(--sbb-button-border-radius);
  color: var(--_color);
  cursor: var(--sbb-button-cursor);
  user-select: none;
  background-color: var(--_background-color);
  transition-duration: var(--sbb-button-transition-duration);
  transition-timing-function: var(--sbb-button-transition-easing-function);
  transition-property: color, background-color;

  // The padding block value is only a minimal padding to preserve a padding if the content becomes larger than intended.
  // Positioning of the content is made by flexbox vertical centering.
  // The real padding displayed is larger than the defined value below.
  padding-block: var(--sbb-button-padding-block-min);
  padding-inline: var(--sbb-button-padding-inline);

  // Needed for support border (see below)
  position: relative;

  // Used to display border and shadow
  &::before {
    content: '';
    position: absolute;
    inset: var(--_button-inset);
    border: var(--_border);
    border-radius: var(--sbb-button-border-radius);
    pointer-events: none;
    box-shadow: var(--sbb-button-box-shadow);
    transition-duration: var(--sbb-button-transition-duration);
    transition-timing-function: var(--sbb-button-transition-easing-function);
    transition-property: inset, border, box-shadow;
  }

  :host([data-focus-visible]) &,
    // Handle focus on the host (button variant)
  :host(:focus-visible) &,
    // Handle focus on the action (link variant)
  &:focus-visible {
    &::before {
      @include sbb.focus-outline;
    }
  }
}

.sbb-button__label {
  @include sbb.ellipsis;

  :host(#{$icon-only}) & {
    display: none;
  }
}

.sbb-button__label,
::slotted([slot='icon']),
sbb-icon {
  transition: translate var(--sbb-button-transition-duration)
    var(--sbb-button-transition-easing-function);
  translate: 0 var(--sbb-button-translate-y-content-hover, 0);
}
