@use '../../core/styles' as sbb;

// Box-sizing rules contained in typography are not traversing Shadow DOM boundaries. We need to include box-sizing mixin in every component.
@include sbb.box-sizing;

:host {
  display: block;

  // Setting the height here reserves the space for the header which will else be lost with fixed position.
  height: var(--sbb-header-height);

  // Overwrites logo in slotted and default case
  --sbb-logo-height: #{sbb.px-to-rem-build(16)};
  --sbb-signet-height: #{sbb.px-to-rem-build(16)};
  --sbb-header-position: fixed;
  --sbb-header-transition-duration: var(
    --sbb-disable-animation-duration,
    var(--sbb-animation-duration-6x)
  );
  --sbb-header-inset-inline-end: 0;

  @include sbb.mq($from: medium) {
    --sbb-logo-height: #{sbb.px-to-rem-build(20)};
    --sbb-signet-height: #{sbb.px-to-rem-build(20)};
  }
}

:host([hide-on-scroll]) {
  --sbb-header-position: absolute;
}

:host([hide-on-scroll][data-fixed]) {
  --sbb-header-position: fixed;
  --sbb-header-animation-name: hide;
  --sbb-header-transform: translate3d(0, -100%, 0);
  --sbb-header-inset-inline-end: var(--sbb-scrollbar-width, 0);
}

:host([hide-on-scroll][data-fixed][data-animated]) {
  // Hide transition
  --sbb-header-transition-timing: cubic-bezier(0.4, 0, 1, 1);
}

:host([hide-on-scroll][data-fixed][data-visible]) {
  --sbb-header-animation-name: show;
  --sbb-header-transform: translate3d(0, 0, 0);

  // Show transition
  --sbb-header-transition-timing: cubic-bezier(0, 0, 0.2, 1);
}

:host([hide-on-scroll][data-fixed][data-has-visible-focus-within]) {
  --sbb-header-transition-duration: 0;
  --sbb-header-transform: translate3d(0, 0, 0);
}

.sbb-header {
  position: var(--sbb-header-position);
  inset: 0 var(--sbb-header-inset-inline-end) auto 0;
  background: var(--sbb-color-white);
  z-index: var(--sbb-header-z-index, 10);
  transform: var(--sbb-header-transform);
  transition: {
    property: box-shadow;
    duration: var(--sbb-header-transition-duration);
    timing-function: var(--sbb-header-transition-timing);
  }
  animation: {
    name: var(--sbb-header-animation-name);
    duration: var(--sbb-header-transition-duration);
    timing-function: var(--sbb-header-transition-timing);
  }

  :host(:is([data-shadow], [data-has-visible-focus-within][data-fixed])) & {
    @include sbb.shadow-level-9-soft;
  }

  @include sbb.if-forced-colors {
    border-block-end: var(--sbb-border-width-1x) solid CanvasText;
  }
}

.sbb-header__wrapper {
  display: flex;
  align-items: center;
  justify-content: flex-start;
  height: var(--sbb-header-height);

  :host(:not([expanded])) & {
    @include sbb.page-spacing;
  }

  :host([expanded]) & {
    @include sbb.page-spacing-expanded;
  }
}

// Fix left offset if first element of the header is a sbb-header-button/sbb-header-link.
// The value of the offset is calculated inside sbb-header-button/sbb-header-link styles.
::slotted(:is(sbb-header-button, sbb-header-link):first-child) {
  margin-inline-start: var(--sbb-header-first-item-margin-inline-start);
}

::slotted(:is(sbb-header-button, sbb-header-link)) {
  :host([size='s']) & {
    --sbb-header-action-min-height: var(--sbb-size-element-xs);
    --sbb-header-action-padding-inline: var(--sbb-spacing-fixed-4x);
  }
}

::slotted(*) {
  flex: 0 0 auto;
}

::slotted(.sbb-header-shrinkable) {
  flex-shrink: 1;
  min-width: 0;
}

::slotted(.sbb-header-spacer) {
  flex-grow: 1;
}

::slotted(.sbb-header-logo) {
  margin-inline-start: var(--sbb-spacing-responsive-s);
}

// Apply padding and outline to possible slotted link in logo slot
::slotted(a.sbb-header-logo) {
  display: block;
  padding-block: var(--sbb-spacing-fixed-3x);
  position: relative;

  // Use !important here to not interfere with Firefox focus ring definition
  // which appears in normalize CSS of several frameworks.
  outline: none !important;
}

// To show the correct outline, we need to span a hidden element filling the link but without the outline-offset.
::slotted(a.sbb-header-logo)::before {
  content: '';
  display: block;
  position: absolute;
  inset: var(--sbb-spacing-fixed-3x) 0;
}

::slotted(a.sbb-header-logo:focus-visible)::before {
  @include sbb.focus-outline;

  outline-offset: var(--sbb-spacing-fixed-3x);

  // As if the outline has an offset, the border radius increases, we set it to the smallest possible border-radius.
  border-radius: 1px;
}

@keyframes show {
  from {
    transform: translate3d(0, -100%, 0);
  }

  to {
    transform: translate3d(0, 0, 0);
  }
}

@keyframes hide {
  from {
    transform: translate3d(0, 0, 0);
  }

  to {
    transform: translate3d(0, -100%, 0);
  }
}
