@use '../../core/styles' as sbb;

// Box-sizing rules contained in typography are not traversing Shadow DOM boundaries. We need to include box-sizing mixin in every component.
@include sbb.box-sizing;

$intersector-overlapping: 1px;

// `data-sticking` v.s. `data-state='sticky'`:
// While `data-sticking` is representing whether the sticky bar is currently sticking (due scrolling),
// the `data-state` holds information whether the `position: sticky` is applied or not
// but not considering the real sticking state.

:host {
  --sbb-sticky-bar-position: sticky;
  --sbb-sticky-bar-padding-block: var(--sbb-spacing-responsive-xs);
  --sbb-sticky-bar-border-radius: var(--sbb-border-radius-8x);
  --sbb-sticky-bar-animation-easing: var(--sbb-animation-easing);
  --sbb-sticky-bar-fade-in-animation-duration: var(
    --sbb-disable-animation-duration,
    var(--sbb-animation-duration-5x)
  );
  --sbb-sticky-bar-fade-out-animation-duration: var(
    --sbb-disable-animation-duration,
    var(--sbb-animation-duration-2x)
  );
  --sbb-sticky-bar-slide-vertically-animation-duration: var(
    --sbb-disable-animation-duration,
    var(--sbb-animation-duration-4x)
  );
  --sbb-sticky-bar-slide-vertically-animation-easing: ease-out;
  --sbb-sticky-bar-slide-vertically-animation-delay: 0s;
  --sbb-sticky-bar-slide-vertically-animation-name: unset;
  --_sbb-sticky-bar-background-animation-duration: var(
    --sbb-sticky-bar-fade-out-animation-duration
  );
  --_sbb-sticky-bar-intersector-background-color: transparent;
  --_sbb-sticky-bar-forced-colors-border: none;

  // Display contents needed to get the sticky bar sticky.
  display: contents;
}

:host([size='s']) {
  --sbb-sticky-bar-padding-block: var(--sbb-spacing-responsive-xxxs);
}

:host([data-sticking]:not([data-state='unsticky'])) {
  --sbb-sticky-bar-sticky-background-color: var(
    --sbb-container-background-color,
    var(--sbb-color-white)
  );
  --_sbb-sticky-bar-intersector-background-color: var(--sbb-sticky-bar-sticky-background-color);
  --_sbb-sticky-bar-background-animation-duration: var(--sbb-sticky-bar-fade-in-animation-duration);

  @include sbb.if-forced-colors {
    --_sbb-sticky-bar-forced-colors-border: var(--sbb-border-width-1x) solid CanvasText;
  }
}

:host([data-sticking]:not([data-state='unsticky'])[color='white']) {
  --sbb-sticky-bar-sticky-background-color: var(--sbb-color-white);
}

:host([data-sticking]:not([data-state='unsticky'])[color='milk']) {
  --sbb-sticky-bar-sticky-background-color: var(--sbb-color-milk);
}

:host([data-sticking]:not([data-state='unsticky'])[color='midnight']) {
  --sbb-sticky-bar-sticky-background-color: var(--sbb-color-midnight);
}

:host([data-sticking]:not([data-state='unsticky'])[color='charcoal']) {
  --sbb-sticky-bar-sticky-background-color: var(--sbb-color-charcoal);
}

:host(
  :is(
    [data-sticking]:is([data-slide-vertically], [data-state='sticking'], [data-state='unsticking']),
    [data-state='unsticky']
  )
) {
  --_sbb-sticky-bar-background-animation-duration: 0s;
}

:host(
  [data-sticking]:is(
      [data-slide-vertically]:not([data-state='unsticky'], [data-state='unsticking']),
      [data-state='sticking']
    )
) {
  --sbb-sticky-bar-slide-vertically-animation-name: slide-in;
}

:host([data-sticking][data-state='unsticking']) {
  --sbb-sticky-bar-slide-vertically-animation-name: slide-out;
}

:host(:is(:not([data-initialized]), [data-state='unsticky'])) {
  --sbb-sticky-bar-position: relative;
}

.sbb-sticky-bar__wrapper {
  position: var(--sbb-sticky-bar-position);
  inset-block-end: 0;
  display: block;
  z-index: var(--sbb-sticky-bar-z-index);

  animation: {
    name: var(--sbb-sticky-bar-slide-vertically-animation-name);
    duration: var(--sbb-sticky-bar-slide-vertically-animation-duration);
    timing-function: var(--sbb-sticky-bar-slide-vertically-animation-easing);
    delay: var(--sbb-sticky-bar-slide-vertically-animation-delay);

    // Fill mode needed to enable delay
    fill-mode: backwards;
  }

  &::after,
  &::before {
    content: '';
    inset: 0;
    position: absolute;
    display: block;
    z-index: -1;
  }

  // Container background color (copying container)
  &::before {
    background-color: var(--sbb-container-background-color);

    // Needed because there is no content and Firefox
    // has troubles displaying correct padding when there is no content.
    padding: 0 !important;

    :host(:not([data-expanded])) & {
      @include sbb.page-spacing;
    }
  }

  // Color and border radius when sticky
  &::after {
    background-color: var(--sbb-sticky-bar-sticky-background-color, transparent);
    border-start-start-radius: var(--sbb-sticky-bar-border-radius);
    border-start-end-radius: var(--sbb-sticky-bar-border-radius);
    transition: background-color var(--_sbb-sticky-bar-background-animation-duration)
      var(--sbb-sticky-bar-animation-easing);

    // Display a border on high contrast mode.
    border: var(--_sbb-sticky-bar-forced-colors-border);
  }
}

.sbb-sticky-bar {
  display: flex;
  padding-block: var(--sbb-sticky-bar-padding-block);

  // To push the .sbb-sticky-bar__intersector up without using absolute position we need a negative block margin.
  margin-block-end: -$intersector-overlapping;

  // Shadow with border radius and clipped shadow at the bottom
  &::before {
    content: '';
    position: absolute;
    inset: 0;
    z-index: -1;
    border-start-start-radius: var(--sbb-sticky-bar-border-radius);
    border-start-end-radius: var(--sbb-sticky-bar-border-radius);
    transition: box-shadow var(--_sbb-sticky-bar-background-animation-duration)
      var(--sbb-sticky-bar-animation-easing);
    clip-path: polygon(
      -50% calc(-1 * var(--sbb-shadow-elevation-level-11-shadow-1-blur)),
      150% calc(-1 * var(--sbb-shadow-elevation-level-11-shadow-1-blur)),
      150% 50%,
      -50% 50%
    );

    :host([data-sticking]:not([data-state='unsticky'])) & {
      @include sbb.shadow-level-11-soft;
    }
  }

  :host(:not([data-expanded])) & {
    @include sbb.page-spacing;
  }

  :host([data-expanded]) & {
    @include sbb.page-spacing-expanded;
  }
}

.sbb-sticky-bar__intersector {
  // In order to make the intersection observer work properly on windows the intersector needs to have a defined height
  height: $intersector-overlapping;

  &::after {
    content: '';
    display: block;
    position: absolute;
    width: 100%;
    height: calc(var(--sbb-sticky-bar-bottom-overlapping-height, 0) + $intersector-overlapping);
    background-color: var(--_sbb-sticky-bar-intersector-background-color);
    pointer-events: none;
    transition: background-color var(--_sbb-sticky-bar-background-animation-duration)
      var(--sbb-sticky-bar-animation-easing);
  }
}

@keyframes slide-in {
  from {
    transform: translateY(100%);
  }

  to {
    transform: translateY(0%);
  }
}

@keyframes slide-out {
  from {
    transform: translateY(0%);
  }

  to {
    transform: translateY(100%);
  }
}
