@use '../core/styles' as sbb;

// Box-sizing rules contained in typography are not traversing Shadow DOM boundaries. We need to include box-sizing mixin in every component.
@include sbb.box-sizing;

:host {
  --sbb-clock-hours-animation-start-angle: 0deg;
  --sbb-clock-seconds-animation-start-angle: 0deg;
  --sbb-clock-hours-animation-duration: 0s;
  --sbb-clock-seconds-animation-duration: 0s;
  --sbb-clock-animation-play-state: paused;
  --sbb-clock-seconds-hand-color: var(--sbb-color-brand);
  --sbb-clock-face-color: var(--sbb-color-1);
  --sbb-clock-background-color: var(--sbb-background-color-1);

  display: block;
}

.sbb-clock {
  position: relative;
  width: 100%;
  height: 100%;
  aspect-ratio: 1 / 1;
  overflow: hidden;
  contain: content;
}

.sbb-clock__face,
.sbb-clock__hand-hours,
.sbb-clock__hand-minutes,
.sbb-clock__hand-seconds {
  position: absolute;
  inset: 0;
  transform-origin: center center;
  transform: rotateZ(0deg);
  transform-style: preserve-3d;
  backface-visibility: hidden;
}

.sbb-clock__hand-hours,
.sbb-clock__hand-minutes,
.sbb-clock__face {
  fill: var(--sbb-clock-face-color);
}

.sbb-clock__hand-minutes {
  transition: transform var(--sbb-disable-animation-duration, 0.2s)
    cubic-bezier(0.4, 2.08, 0.55, 0.44);

  @supports not (aspect-ratio: 1 / 1) {
    transform-origin: 50% 49.625%;
  }
}

.sbb-clock__hand-hours {
  animation-name: rotate;
  animation-duration: 43200s;
  animation-iteration-count: infinite;
  animation-timing-function: linear;
  animation-play-state: var(--sbb-clock-animation-play-state);
}

.sbb-clock__hand-hours--initial-hour {
  animation-name: hand-hours-animation-initial-hour;
  animation-duration: var(--sbb-clock-hours-animation-duration);
  animation-play-state: var(--sbb-clock-animation-play-state);
  animation-iteration-count: 1;
}

.sbb-clock__hand-minutes--no-transition {
  transition: none;
}

.sbb-clock__hand-seconds {
  animation-name: hand-seconds-animation;
  animation-duration: 60s;
  animation-timing-function: linear;
  animation-play-state: var(--sbb-clock-animation-play-state);
  animation-iteration-count: infinite;
  fill: var(--sbb-clock-seconds-hand-color);
}

.sbb-clock__hand-seconds--initial-minute {
  animation-name: hand-seconds-animation-initial-minute;
  animation-duration: var(--sbb-clock-seconds-animation-duration);
  animation-play-state: var(--sbb-clock-animation-play-state);
  animation-iteration-count: 1;
}

:is(.sbb-clock__hand-hours, .sbb-clock__hand-minutes, .sbb-clock__hand-seconds) {
  :host(:not([data-initialized])) & {
    display: none;
  }
}

@keyframes rotate {
  100% {
    transform: rotateZ(360deg);
  }
}

@keyframes hand-hours-animation-initial-hour {
  0% {
    transform: rotateZ(var(--sbb-clock-hours-animation-start-angle));
  }

  100% {
    transform: rotateZ(360deg);
  }
}

@keyframes hand-seconds-animation {
  0% {
    transform: rotateZ(0deg);
  }

  97.5%,
  100% {
    transform: rotateZ(360deg);
  }
}

@keyframes hand-seconds-animation-initial-minute {
  0% {
    transform: rotateZ(var(--sbb-clock-seconds-animation-start-angle));
  }

  97.5%,
  100% {
    transform: rotateZ(360deg);
  }
}
