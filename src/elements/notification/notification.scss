@use '../core/styles' as sbb;

// Box-sizing rules contained in typography are not traversing Shadow DOM boundaries. We need to include box-sizing mixin in every component.
@include sbb.box-sizing;

// Open/Close animation vars
$open-anim-margin-from: 0;
$open-anim-margin-to: var(--sbb-notification-margin, 0);
$open-anim-opacity-from: 0;
$open-anim-opacity-to: 1;
$open-anim-height-from: 0;
$open-anim-height-to: calc(
  var(--sbb-notification-height) + (var(--sbb-notification-border-width) * 2)
);

:host {
  --sbb-notification-margin: 0;
  --sbb-notification-padding-block: var(--sbb-spacing-responsive-xxs);
  --sbb-notification-padding-inline: var(--sbb-spacing-responsive-xs);
  --sbb-notification-color: var(--sbb-color-2-negative-inverted);
  --sbb-notification-background-color: light-dark(
    color-mix(in srgb, var(--sbb-notification-type-color) 5%, white),
    color-mix(in srgb, var(--sbb-notification-type-color) 35%, white)
  );
  --sbb-notification-icon-color: var(--sbb-notification-type-color);
  --sbb-notification-icon-margin-block-start: 0;
  --sbb-notification-border-width: var(--sbb-border-width-1x);
  --sbb-notification-border: var(--sbb-notification-border-width) solid
    var(--sbb-notification-type-color);
  --sbb-notification-base-radius: var(--sbb-border-radius-4x);
  --sbb-notification-border-radius: calc(var(--sbb-notification-base-radius) / 2)
    var(--sbb-notification-base-radius) var(--sbb-notification-base-radius)
    calc(var(--sbb-notification-base-radius) / 2);
  --sbb-notification-animation-duration: var(
    --sbb-disable-animation-duration,
    var(--sbb-animation-duration-4x)
  );
  --sbb-notification-timing-function: ease-in;
  --sbb-notification-content-padding-inline: var(--sbb-spacing-responsive-xxxs)
    var(--sbb-spacing-responsive-xs);
  --_sbb-notification-icon-authoritative-font-size: 1em;
  --_sbb-notification-icon-authoritative-line-height: var(--sbb-typo-line-height-body-text);

  // As the notification has always a light background, we have to fix the focus outline color
  // to default color for cases where the notification is used in a negative context.
  --sbb-focus-outline-color: var(--sbb-focus-outline-color-default);

  display: block;
}

// By default, the open animation is disabled
:host([data-state='opening']:not([animation='open'], [animation='all'])) {
  @include sbb.disable-animation;
}

:host([data-state='closing']:not([animation='close'], [animation='all'])) {
  @include sbb.disable-animation;
}

:host([data-resize-disable-animation]) {
  @include sbb.disable-animation;
}

// Types
:host(:is(:not([type]), [type='info'])) {
  --sbb-notification-type-color: var(--sbb-color-smoke);
  --sbb-notification-icon-color: var(--sbb-notification-color);
  --sbb-notification-divider-opacity-light: 20%;
  --sbb-notification-divider-opacity-dark: 20%;
}

:host([type='success']) {
  --sbb-notification-type-color: var(--sbb-color-success);
  --sbb-notification-divider-opacity-light: 15%;
  --sbb-notification-divider-opacity-dark: 30%;
}

:host([type='warn']) {
  --sbb-notification-type-color: var(--sbb-color-warning);
  --sbb-notification-icon-color: var(--sbb-notification-color);
  --sbb-notification-divider-opacity-light: 25%;
  --sbb-notification-divider-opacity-dark: 40%;
}

:host([type='error']) {
  --sbb-notification-type-color: var(--sbb-color-error);
  --sbb-notification-divider-opacity-light: 10%;
  --sbb-notification-divider-opacity-dark: 25%;
}

:host([size='s']) {
  --sbb-notification-padding-block: var(--sbb-spacing-responsive-xxxs);
  --sbb-notification-padding-inline: var(--sbb-spacing-responsive-xxs)
    var(--sbb-spacing-responsive-xxxs);
  --sbb-notification-content-padding-inline: var(--sbb-spacing-responsive-xxxs)
    var(--sbb-spacing-responsive-xxs);

  @include sbb.mq($from: small) {
    --sbb-notification-padding-inline: var(--sbb-spacing-responsive-xxs);
  }
}

.sbb-notification__wrapper {
  position: relative;
  inset-inline-start: calc(
    var(--sbb-notification-base-radius) - var(--sbb-notification-border-width)
  );
  width: calc(
    100% - calc(var(--sbb-notification-base-radius) - var(--sbb-notification-border-width))
  );
  border: var(--sbb-notification-border);
  border-radius: var(--sbb-notification-border-radius);
  opacity: #{$open-anim-opacity-from};
  max-height: #{$open-anim-height-from};
  margin: #{$open-anim-margin-from};

  &::before {
    content: '';
    position: absolute;
    inset: calc(var(--sbb-notification-border-width) * -1) var(--sbb-notification-base-radius)
      calc(var(--sbb-notification-border-width) * -1) calc(var(--sbb-notification-base-radius) * -1);
    background-color: var(--sbb-notification-type-color);
    border: var(--sbb-notification-border);
    border-radius: var(--sbb-notification-base-radius);
  }

  :host(:is([data-state='opened'], [data-state='closing'])) & {
    opacity: #{$open-anim-opacity-to};
    max-height: #{$open-anim-height-to};
    margin: #{$open-anim-margin-to};
  }

  :host([data-state='opening']) & {
    animation: {
      name: open;
      fill-mode: forwards;
      duration: var(--sbb-notification-animation-duration);
      timing-function: var(--sbb-notification-timing-function);
    }
  }

  :host([data-state='closing']) & {
    animation: {
      name: close, close-height;
      fill-mode: forwards;
      duration: var(--sbb-notification-animation-duration);
      timing-function: var(--sbb-notification-timing-function);
      delay: 0s, var(--sbb-disable-animation-duration, var(--sbb-animation-duration-2x));
    }
  }
}

.sbb-notification {
  @include sbb.text-s--regular;

  position: relative;
  display: grid;
  grid-template-columns: 1fr auto;
  align-items: center;
  padding-block: var(--sbb-notification-padding-block);
  padding-inline: var(--sbb-notification-padding-inline);
  color: var(--sbb-notification-color);
  border-radius: var(--sbb-notification-border-radius);
  overflow: hidden;
  background-color: var(--sbb-notification-background-color);

  @include sbb.mq($from: small) {
    grid-template-columns: auto 1fr auto;
    align-items: flex-start;
  }

  :host([size='s']) & {
    @include sbb.text-xs--regular;
  }
}

.sbb-notification__icon {
  color: var(--sbb-notification-icon-color);

  // This is an undocumented feature for sbb.ch, to have the ability to hide the icon.
  --sbb-icon-svg-width: var(--sbb-notification-icon-size);

  @include sbb.mq($from: small) {
    margin-block-start: max(
      0rem,
      calc(
        (
            (
                var(--_sbb-notification-icon-authoritative-font-size) *
                  var(--_sbb-notification-icon-authoritative-line-height)
              ) - var(--sbb-size-icon-ui-small)
          ) /
          2
      )
    );
  }
}

.sbb-notification__content {
  // The content of the notification is always displayed in positive mode,
  // therefore, to have slotted content correctly display, we need only allow light mode.
  color-scheme: only light;
  order: 3;
  grid-area: 2 / 1 / 3 / 3;
  margin-block-start: var(--sbb-spacing-fixed-2x);

  @include sbb.mq($from: small) {
    order: initial;
    grid-area: initial;
    margin-block-start: 0;
    padding-inline: var(--sbb-notification-content-padding-inline);
  }
}

.sbb-notification__text {
  // Reset paragraph styles
  display: inline;
  margin: 0;
  padding: 0;
}

.sbb-notification__close-wrapper {
  display: flex;
  align-items: center;
  gap: var(--sbb-spacing-responsive-xxs);
  height: 100%;
}

.sbb-notification__divider {
  --sbb-divider-color: light-dark(
    color-mix(
      in srgb,
      var(--sbb-notification-type-color) var(--sbb-notification-divider-opacity-light),
      var(--sbb-notification-background-color)
    ),
    color-mix(
      in srgb,
      var(--sbb-notification-type-color) var(--sbb-notification-divider-opacity-dark),
      var(--sbb-notification-background-color)
    )
  );

  display: none;
  position: relative;
  inset-inline-start: var(--sbb-border-width-1x);

  @include sbb.mq($from: small) {
    display: block;
    height: calc(100% - (var(--sbb-spacing-fixed-1x) * 2));
  }
}

@keyframes open {
  from {
    opacity: #{$open-anim-opacity-from};
    max-height: #{$open-anim-height-from};
    margin: #{$open-anim-margin-from};
  }

  to {
    opacity: #{$open-anim-opacity-to};
    max-height: #{$open-anim-height-to};
    margin: #{$open-anim-margin-to};
  }
}

@keyframes close {
  from {
    opacity: #{$open-anim-opacity-to};
    margin: #{$open-anim-margin-to};
  }

  to {
    opacity: #{$open-anim-opacity-from};
    margin: #{$open-anim-margin-from};
  }
}

@keyframes close-height {
  from {
    max-height: #{$open-anim-height-to};
  }

  to {
    max-height: #{$open-anim-height-from};
  }
}

::slotted(sbb-title) {
  // Overwrite sbb-title default margin
  margin: 0;
}
