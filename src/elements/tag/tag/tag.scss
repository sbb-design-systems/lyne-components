@use '../../core/styles' as sbb;

$disabled: ':disabled, [disabled-interactive]';
$active: ':active, [data-active]';

// Box-sizing rules contained in typography are not traversing Shadow DOM boundaries. We need to include box-sizing mixin in every component.
@include sbb.box-sizing;

:host {
  display: inline-block;

  // Use !important here to not interfere with Firefox focus ring definition
  // which appears in normalize CSS of several frameworks.
  outline: none !important;
  max-width: 100%;

  --sbb-tag-border-radius: var(--sbb-border-radius-infinity);
  --sbb-tag-background-color: var(--sbb-color-white);
  --sbb-tag-border-color: var(--sbb-color-cloud);
  --sbb-tag-border-style: solid;
  --sbb-tag-border-width: var(--sbb-border-width-1x);
  --sbb-tag-text-color: var(--sbb-color-charcoal);
  --sbb-tag-amount-color: var(--sbb-color-metal);
  --sbb-tag-height: var(--sbb-size-element-xs);
  --sbb-tag-inset: 0;
  --sbb-tag-cursor: pointer;
  --sbb-tag-content-shift: translateY(0);
  --sbb-tag-animation-duration: var(
    --sbb-disable-animation-duration,
    var(--sbb-animation-duration-2x)
  );
  --sbb-tag-animation-easing: var(--sbb-animation-easing);
  --sbb-tag-padding-inline: var(--sbb-spacing-fixed-5x);
  --sbb-tag-gap: var(--sbb-spacing-fixed-2x);

  @include sbb.if-forced-colors {
    --sbb-tag-background-color: Canvas !important;
    --sbb-tag-text-color: ButtonText;
    --sbb-tag-amount-color: ButtonText;
    --sbb-tag-border-color: CanvasText;
    --sbb-tag-border-width: var(--sbb-border-width-2x);
  }
}

// Active state
:host([data-checked]) {
  --sbb-tag-border-color: var(--sbb-color-charcoal);
  --sbb-tag-border-width: var(--sbb-border-width-2x);

  @include sbb.if-forced-colors {
    --sbb-tag-border-color: Highlight !important;
  }
}

:host(:is(#{$disabled})) {
  --sbb-tag-text-color: var(--sbb-color-granite);
  --sbb-tag-amount-color: var(--sbb-tag-text-color);
  --sbb-tag-background-color: var(--sbb-color-milk);
  --sbb-tag-border-color: var(--sbb-color-cement);
  --sbb-tag-border-style: dashed;
  --sbb-tag-cursor: unset;
  --sbb-tag-pointer-events: none;

  @include sbb.if-forced-colors {
    --sbb-tag-text-color: GrayText;
    --sbb-tag-amount-color: GrayText;
    --sbb-tag-border-color: GrayText;
  }
}

:host([data-checked]:is(#{$disabled})) {
  --sbb-tag-border-color: var(--sbb-color-metal);
}

:host(:hover:not(#{$disabled}, #{$active})) {
  @include sbb.hover-mq($hover: true) {
    --sbb-tag-background-color: var(--sbb-color-milk);
    --sbb-tag-inset: calc(var(--sbb-border-width-2x) * -1);
    --sbb-tag-content-shift: translateY(calc(var(--sbb-border-width-1x) * -1));

    @include sbb.if-forced-colors {
      --sbb-tag-border-color: Highlight;
    }
  }
}

// Pressed state
:host(:is(#{$active}):not(#{$disabled})) {
  --sbb-tag-background-color: var(--sbb-color-milk);
  --sbb-tag-border-color: var(--sbb-color-iron);
  --sbb-tag-border-width: var(--sbb-border-width-2x);
  --sbb-tag-text-color: var(--sbb-color-iron);

  @include sbb.if-forced-colors {
    --sbb-tag-border-color: Highlight;
    --sbb-tag-text-color: ButtonText;
  }
}

:host([size='s']) {
  --sbb-tag-height: var(--sbb-size-element-xxxs);
  --sbb-tag-padding-inline: var(--sbb-spacing-fixed-3x);
}

.sbb-tag {
  @include sbb.text-xs--bold;

  position: relative;
  display: flex;
  align-items: center;
  height: var(--sbb-tag-height);
  max-width: 100%;
  gap: var(--sbb-tag-gap);
  padding-inline: var(--sbb-tag-padding-inline);
  cursor: var(--sbb-tag-cursor);
  border-radius: var(--sbb-tag-border-radius);
  color: var(--sbb-tag-text-color);
  transition: color var(--sbb-tag-animation-duration) var(--sbb-tag-animation-easing);
  -webkit-tap-highlight-color: transparent;
  user-select: none;
  pointer-events: var(--sbb-tag-pointer-events, unset);

  &::before {
    content: '';
    position: absolute;
    inset: var(--sbb-tag-inset);
    background-color: var(--sbb-tag-background-color);
    border: var(--sbb-tag-border-width) var(--sbb-tag-border-style) var(--sbb-tag-border-color);
    border-radius: var(--sbb-tag-border-radius);
    transition-duration: var(--sbb-tag-animation-duration);
    transition-timing-function: var(--sbb-tag-animation-easing);
    transition-property: inset, background-color, border-color, box-shadow;

    // Hide focus outline when focus origin is mouse or touch. This is being used as a workaround in various components.
    :host(:focus-visible:not([data-focus-origin='mouse'], [data-focus-origin='touch'])) & {
      @include sbb.focus-outline;
    }
  }
}

.sbb-tag__icon {
  display: flex;
  align-items: center;
  height: calc(var(--sbb-typo-line-height-body-text) * 1em);
  flex-shrink: 0;

  :host(:not([data-slot-names~='icon'], [icon-name])) & {
    display: none;
  }
}

.sbb-tag__text {
  @include sbb.ellipsis;
}

.sbb-tag__amount {
  @include sbb.text-xs--regular;

  color: var(--sbb-tag-amount-color);

  :host(:not([data-slot-names~='amount'], [amount])) & {
    display: none;
  }
}

.sbb-tag--shift {
  transition: transform var(--sbb-tag-animation-duration) var(--sbb-tag-animation-easing);
  transform: var(--sbb-tag-content-shift);
  will-change: transform;
}
