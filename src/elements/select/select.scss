@use '../core/styles' as sbb;

// Box-sizing rules contained in typography are not traversing Shadow DOM boundaries. We need to include box-sizing mixin in every component.
@include sbb.box-sizing;

// Fixes the gap between the origin and the overlay by creating conjunction
// corners based on the origin element border radius
@include sbb.overlay-gap-fix;

:host {
  @include sbb.options-panel-overlay-variables;

  --sbb-options-panel-internal-z-index: var(
    --sbb-select-z-index,
    var(--sbb-overlay-default-z-index)
  );

  display: block;
}

:host([size='s']) {
  @include sbb.options-panel-overlay-size-s-variables;
}

:host([negative]) {
  @include sbb.options-panel-overlay-negative-variables;
}

:host(:not([data-state])),
:host([data-state='closed']) {
  --sbb-options-panel-visibility: hidden;
}

:host([data-state='opening']) {
  --sbb-options-panel-animation-name: open;
}

:host([data-state='closing']) {
  --sbb-options-panel-animation-name: close;
}

:host([data-state='opened']),
:host([data-state='opening']) {
  --sbb-options-panel-gap-fix-opacity: 1;
}

:host([data-options-panel-position='below']) {
  --sbb-options-panel-animation-transform: translateY(
    calc((var(--sbb-options-panel-origin-height) / 2) * -1)
  );
}

:host([data-options-panel-position='above']) {
  --sbb-options-panel-options-border-radius: var(--sbb-options-panel-border-radius)
    var(--sbb-options-panel-border-radius) 0 0;
  --sbb-options-panel-gap-fix-top: var(--sbb-options-panel-max-height);
  --sbb-options-panel-gap-fix-transform: rotate(180deg);
  --sbb-options-panel-animation-transform: translateY(
    calc(var(--sbb-options-panel-origin-height) / 2)
  );
}

::slotted(sbb-divider) {
  margin-block: var(--sbb-options-panel-divider-margin-block);
}

:host([preserve-icon-space]) {
  --sbb-option-icon-container-display: block;
}

.sbb-select__trigger {
  @include sbb.ellipsis;

  cursor: default;
  height: calc(1em * var(--sbb-typo-line-height-body-text));
}

.sbb-select__trigger--placeholder {
  color: var(--sbb-select-placeholder-color, var(--sbb-color-metal));

  // Note: when the sbb-select is used within a sbb-form-field, some style are applied from it
  // (see selector `.sbb-form-field__input ::slotted(:where(input, select, sbb-select))` in the sbb-form-field.scss);
  // so, next line is mandatory because we need to override the rule from the parent.
  -webkit-text-fill-color: var(--sbb-select-placeholder-color, var(--sbb-color-metal));
}

.sbb-select__container {
  @include sbb.options-panel-overlay-container;

  // Hide popover artifacts
  &[popover] {
    margin: 0;
    padding: 0;
    border: none;
    width: auto;
    height: auto;
    background-color: transparent;
  }
}

.sbb-select__gap-fix {
  @include sbb.options-panel-overlay-gap;
}

.sbb-select__panel {
  @include sbb.options-panel-overlay;

  :host([data-options-panel-position='below']) & {
    inset-block-start: calc(
      var(--sbb-options-panel-position-y) - var(--sbb-options-panel-origin-height)
    );
  }

  :host(:is([data-state='opened'], [data-state='opening'])) & {
    @include sbb.shadow-level-5-hard;
  }

  :host(:is([data-state='opened'], [data-state='opening'])[negative]) & {
    @include sbb.shadow-level-5-hard-negative;
  }

  &::before {
    :host([data-options-panel-position='below']) & {
      display: block;
    }
  }

  &::after {
    :host([data-options-panel-position='above']) & {
      display: block;
    }
  }

  // stylelint-disable-next-line no-descending-specificity
  &::before,
  &::after {
    :host(:is([data-state='opened'], [data-state='opening'])[data-option-panel-origin-borderless])
      & {
      @include sbb.shadow-level-5-hard;
    }

    :host(
        :is(
            [data-state='opened'],
            [data-state='opening']
          )[data-option-panel-origin-borderless][negative]
      )
      & {
      @include sbb.shadow-level-5-hard-negative;
    }
  }
}

.sbb-select__wrapper {
  overflow: hidden;
}

.sbb-select__options {
  @include sbb.optionsOverlay;
  @include sbb.scrollbar-rules;

  @include sbb.if-forced-colors {
    border: var(--sbb-border-width-1x) solid CanvasText;
    border-block-start: none;
  }
}

@keyframes open {
  from {
    transform: var(--sbb-options-panel-animation-transform);
    opacity: 0;
  }

  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes close {
  from {
    transform: translateY(0);
    opacity: 1;
  }

  to {
    transform: var(--sbb-options-panel-animation-transform);
    opacity: 0;
  }
}
