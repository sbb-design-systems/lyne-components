@use '../../core/styles' as sbb;

// Box-sizing rules contained in typography are not traversing Shadow DOM boundaries. We need to include box-sizing mixin in every component.
@include sbb.box-sizing;

:host {
  display: inline-block;

  --sbb-form-field-background-color: var(--sbb-color-white);
  --sbb-form-field-border-color: var(--sbb-color-smoke);
  --sbb-form-field-border-style: solid;
  --sbb-form-field-border-radius: var(--sbb-border-radius-4x);
  --sbb-form-field-border-width: var(--sbb-border-width-1x);
  --sbb-form-field-min-height: var(--sbb-size-element-m);
  --sbb-form-field-label-color: var(--sbb-color-metal);
  --sbb-form-field-prefix-color: var(--sbb-color-metal);
  --sbb-form-field-padding-inline: var(--sbb-spacing-fixed-3x);
  --sbb-form-field-text-color: var(--sbb-color-charcoal);
  --sbb-form-field-arrow-color: var(--sbb-color-charcoal);
  --sbb-form-field-error-divider-width: var(--sbb-spacing-fixed-1x);
  --sbb-form-field-error-padding-block-start: var(--sbb-form-field-error-divider-width);
  --sbb-form-field-gap: var(--sbb-spacing-fixed-2x);
  --sbb-form-field-label-to-input-overlapping: var(--sbb-spacing-fixed-1x);
  --sbb-form-field-select-inline-padding-end: calc(
    var(--sbb-icon-svg-width) + var(--sbb-form-field-gap)
  );
  --sbb-form-field-overflow: hidden;
  --sbb-form-field-input-text-size: var(--sbb-font-size-text-m);
  --sbb-form-field-label-text-size: var(--sbb-font-size-text-xs);
  --sbb-form-field-label-size: calc(
    var(--sbb-form-field-label-text-size) * var(--sbb-typo-line-height-body-text)
  );
  --sbb-form-field-text-line-height: calc(
    var(--sbb-form-field-input-text-size) * var(--sbb-typo-line-height-body-text)
  );
  --sbb-form-field-margin-block-start: calc(
    (
        var(--sbb-form-field-min-height) - var(--sbb-form-field-label-size) - var(
            --sbb-form-field-text-line-height
          ) +
          var(--sbb-form-field-label-to-input-overlapping)
      ) /
      2
  );
  --sbb-form-field-spacer-margin-block-end: calc(
    -1 * var(--sbb-form-field-label-to-input-overlapping)
  );
  --sbb-form-field-floating-label-transform: #{sbb.px-to-rem-build(8.5)};

  // Lock sbb-icon size
  --sbb-icon-svg-width: var(--sbb-size-icon-ui-small);
  --sbb-icon-svg-height: var(--sbb-size-icon-ui-small);

  // As the form field has always a white background, we have to fix the focus outline color
  // to default color for cases where the form field is used in a negative context.
  --sbb-focus-outline-color: var(--sbb-focus-outline-color-default);

  @include sbb.mq($from: medium) {
    --sbb-form-field-floating-label-transform: #{sbb.px-to-rem-build(10.5)};
  }

  @include sbb.if-forced-colors {
    --sbb-form-field-border-color: ButtonBorder;
  }
}

:host(:where(:not([width='collapse']))) {
  min-width: #{sbb.px-to-rem-build(150)};
  width: min(#{sbb.px-to-rem-build(300)}, 100%);
}

:host([negative]) {
  --sbb-form-field-background-color: var(--sbb-color-midnight);
  --sbb-form-field-border-color: var(--sbb-color-smoke);
  --sbb-form-field-label-color: var(--sbb-color-smoke);
  --sbb-form-field-prefix-color: var(--sbb-color-smoke);
  --sbb-form-field-text-color: var(--sbb-color-milk);
  --sbb-focus-outline-color: var(--sbb-focus-outline-color-dark);
  --sbb-form-field-arrow-color: var(--sbb-color-milk);

  @include sbb.if-forced-colors {
    --sbb-form-field-border-color: ButtonBorder;
  }
}

:host([size='s']) {
  --sbb-form-field-min-height: var(--sbb-size-element-xs);
  --sbb-form-field-padding-inline: var(--sbb-spacing-fixed-2x);
  --sbb-form-field-input-text-size: var(--sbb-font-size-text-s);
  --sbb-form-field-label-text-size: var(--sbb-font-size-text-xxs);

  // Values found by try and error
  --sbb-form-field-label-to-input-overlapping: #{sbb.px-to-rem-build(10)};
  --sbb-form-field-floating-label-transform: #{sbb.px-to-rem-build(5.5)};
  --sbb-form-field-spacer-margin-block-end: #{sbb.px-to-rem-build(-8.5)};

  @include sbb.mq($from: medium) {
    // Values found by try and error
    --sbb-form-field-label-to-input-overlapping: #{sbb.px-to-rem-build(11)};
    --sbb-form-field-floating-label-transform: #{sbb.px-to-rem-build(5)};
    --sbb-form-field-spacer-margin-block-end: #{sbb.px-to-rem-build(-8)};
  }
}

:host([size='l']) {
  --sbb-form-field-min-height: var(--sbb-size-element-l);
  --sbb-form-field-padding-inline: var(--sbb-spacing-responsive-xxxs);
}

:host([error-space='reserve']) {
  --sbb-form-field-error-min-height: calc(
    var(--sbb-typo-line-height-body-text) * var(--sbb-font-size-text-xs)
  );
  --sbb-form-field-error-padding-block-start-override: var(--sbb-form-field-error-divider-width);
}

:host(:is([data-readonly], [data-disabled])) {
  --sbb-form-field-background-color: var(--sbb-color-milk);
  --sbb-form-field-border-color: var(--sbb-color-graphite);
  --sbb-form-field-arrow-color: var(--sbb-color-granite);

  @include sbb.if-forced-colors {
    --sbb-form-field-border-color: ButtonBorder;
  }
}

:host(:is([data-readonly], [data-disabled])[negative]) {
  --sbb-form-field-background-color: var(--sbb-color-charcoal);
  --sbb-form-field-border-color: var(--sbb-color-smoke);
  --sbb-form-field-arrow-color: var(--sbb-color-smoke);
}

:host([data-disabled]) {
  --sbb-form-field-label-color: var(--sbb-color-granite);
  --sbb-form-field-prefix-color: var(--sbb-color-granite);
  --sbb-form-field-border-style: dashed;

  @include sbb.if-forced-colors {
    --sbb-form-field-label-color: GrayText !important;
    --sbb-form-field-prefix-color: GrayText !important;
    --sbb-form-field-text-color: GrayText !important;
    --sbb-form-field-border-color: GrayText !important;
  }
}

:host([data-disabled][negative]) {
  --sbb-form-field-text-color: var(--sbb-color-smoke);
  --sbb-form-field-label-color: var(--sbb-color-smoke);
  --sbb-form-field-prefix-color: var(--sbb-color-smoke);
}

:host([data-readonly]:not([negative])) {
  --sbb-form-field-label-color: var(--sbb-color-granite);
  --sbb-form-field-prefix-color: var(--sbb-color-granite);
}

:host(:is([data-input-focused])) {
  --sbb-form-field-border-color: var(--sbb-color-charcoal);
  --sbb-form-field-prefix-color: var(--sbb-color-charcoal);
  --sbb-form-field-border-width: var(--sbb-border-width-2x);

  @include sbb.if-forced-colors {
    --sbb-form-field-border-color: Highlight !important;
    --sbb-form-field-prefix-color: Highlight !important;
  }
}

:host(:is([data-input-focused])[negative]) {
  --sbb-form-field-border-color: var(--sbb-color-milk);
  --sbb-form-field-prefix-color: var(--sbb-color-milk);
}

:host([data-invalid]) {
  --sbb-form-field-border-color: var(--sbb-color-red125);
  --sbb-form-field-text-color: var(--sbb-color-red125);

  @include sbb.if-forced-colors {
    --sbb-form-field-border-color: LinkText !important;
    --sbb-form-field-text-color: LinkText !important;
  }
}

:host([data-invalid][negative]) {
  --sbb-form-field-border-color: var(--sbb-color-red-mode-dark);
  --sbb-form-field-text-color: var(--sbb-color-red-mode-dark);
}

:host(:not([data-has-error])) {
  --sbb-form-field-error-padding-block-start: 0;
}

:host([floating-label]) {
  --sbb-select-placeholder-color: transparent;

  @include sbb.if-forced-colors {
    --sbb-select-placeholder-color: Canvas;
  }
}

:host(:is(:not([data-slot-names~='label'], [label]), [hidden-label])) {
  --sbb-form-field-label-size: 0rem;
  --sbb-form-field-label-to-input-overlapping: 0rem;
}

// Should be after other definitions to override overflow
:host([data-input-type='sbb-slider']) {
  --sbb-form-field-overflow: visible;
}

:host([data-input-type='textarea']) {
  --sbb-form-field-max-height: fit-content;
}

.sbb-form-field__space-wrapper {
  display: flex;
  flex-direction: column;

  @include sbb.zero-width-space;
}

.sbb-form-field__wrapper {
  display: flex;
  gap: var(--sbb-form-field-gap);
  padding-inline: var(--sbb-form-field-padding-inline);
  border-radius: var(--sbb-form-field-border-radius);
  min-height: var(--sbb-form-field-min-height);
  max-height: var(--sbb-form-field-max-height);
  background-color: var(--sbb-form-field-background-color);
  position: relative;

  // Use ::before to avoid content shifting when border width changes.
  &::before {
    content: '';
    display: block;
    position: absolute;
    inset: 0;
    border: var(--sbb-form-field-border-width) var(--sbb-form-field-border-style)
      var(--sbb-form-field-border-color);
    border-radius: var(--sbb-form-field-border-radius);
  }

  :host([data-input-focused][data-focus-origin='keyboard']) & {
    @include sbb.focus-outline;
  }

  // In high contrast, there is no borderless variant
  @media (forced-colors: none) {
    :host(:is([borderless], [data-input-type='sbb-slider'])) & {
      &::before {
        border-color: transparent;
      }
    }

    :host(:is([data-input-focused], [data-disabled])[borderless]) & {
      &::after {
        content: '';
        position: absolute;
        border-block-end: var(--sbb-border-width-1x) var(--sbb-form-field-border-style)
          var(--sbb-form-field-border-color);
        inset-inline: var(--sbb-form-field-padding-inline);
        inset-block-end: 0;
      }
    }
  }
}

::slotted(*[slot='prefix']) {
  color: var(--sbb-form-field-prefix-color);
}

// Ensure slotted inline elements are vertically centered
::slotted(*[slot='prefix']),
::slotted(*[slot='suffix']) {
  display: flex;
  min-width: var(--sbb-icon-svg-width);
  margin-block-start: calc((var(--sbb-form-field-min-height) - var(--sbb-size-icon-ui-small)) / 2);
}

::slotted(sbb-form-field-clear) {
  :host(:is([data-input-empty], [data-disabled], [data-readonly])) & {
    display: none;
  }
}

// As the calendar should be shown below the form field border, we have to stretch the toggle's height.
::slotted(sbb-datepicker-toggle) {
  height: calc((var(--sbb-form-field-min-height) + var(--sbb-size-icon-ui-small)) / 2);
}

@include sbb.if-forced-colors {
  // Align with prefix color
  ::slotted(*[slot='suffix']) {
    color: var(--sbb-form-field-prefix-color);
  }
}

.sbb-form-field__select-input-icon {
  @include sbb.absolute-center-y;

  position: absolute;
  inset-inline-end: 0;
  margin-block-start: calc(-1 * var(--sbb-form-field-margin-block-start) / 2);
  pointer-events: none;
  color: var(--sbb-form-field-arrow-color);
}

.sbb-form-field__input-container {
  flex: 1 1 auto;
  position: relative;
  margin-block-start: var(--sbb-form-field-margin-block-start);

  // Prevents overflowing parent
  min-width: 0;
}

.sbb-form-field__label-spacer {
  display: flex;
  height: calc(var(--sbb-form-field-label-text-size) * var(--sbb-typo-line-height-body-text));

  // Moves label down and input up to meet positioning requirements
  margin-block-end: var(--sbb-form-field-spacer-margin-block-end);
}

// To avoid doubled payload, we group the rules.
:is(.sbb-form-field__label, .sbb-form-field__label-spacer) {
  :host(:not([data-slot-names~='label'], [label])) & {
    display: none;
  }

  :host([hidden-label]) & {
    @include sbb.screen-reader-only;
  }
}

.sbb-form-field__label {
  display: flex;
  max-width: 100%;
  cursor: default;
  position: absolute;
  inset-block-start: 0;
  color: var(--sbb-form-field-label-color);

  // Textarea with forced colors active needs to have the label a level higher
  z-index: 1;

  @include sbb.text-xs--regular;

  :host([size='s']) & {
    @include sbb.text-xxs--regular;
  }

  :host([data-input-type='select']) &,
  :host([data-input-type='sbb-select']) & {
    padding-inline-end: var(--sbb-form-field-select-inline-padding-end);
  }

  :host([floating-label]) & {
    transform-origin: 0 0;
    pointer-events: none; // We shouldn't catch mouse events (let them through).
    backface-visibility: hidden;
    will-change: transform, font-size;

    transition: {
      duration: var(--sbb-disable-animation-duration, var(--sbb-animation-duration-2x));
      timing-function: var(--sbb-animation-easing);
      property: transform, font-size;
    }
  }

  // If floating-label is activated and there is no focus in it (except for select) and no popup is open
  // and input is empty then apply the label transition.
  // If it is empty and readonly, always apply transition
  :host(
      [floating-label]:is(
          :not([data-input-focused]:not([data-input-type='sbb-select']), [data-has-popup-open]),
          [data-readonly]
        )[data-input-empty]
    )
    & {
    font-size: var(--sbb-form-field-input-text-size);
    transform: translateY(var(--sbb-form-field-floating-label-transform));
  }
}

.sbb-form-field__label-ellipsis {
  @include sbb.ellipsis;
}

.sbb-form-field__input {
  display: flex;

  :host(
      [size='s']:is(
          [data-input-type='input'],
          [data-input-type='select'],
          [data-input-type='sbb-select']
        )
    )
    & {
    // In size s, the natural height of the text input is too small.
    // To not reserve too much space, we decrease the height.
    margin-block-end: #{sbb.px-to-rem-build(-2)};
  }
}

.sbb-form-field__error {
  display: flex;
  min-height: var(--sbb-form-field-error-min-height);
  margin-block-start: var(
    --sbb-form-field-error-padding-block-start-override,
    var(--sbb-form-field-error-padding-block-start)
  );
}
