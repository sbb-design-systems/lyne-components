@use '../../core/styles' as sbb;

// Box-sizing rules contained in typography are not traversing Shadow DOM boundaries. We need to include box-sizing mixin in every component.
@include sbb.box-sizing;

@mixin transition($properties...) {
  transition: {
    duration: var(--sbb-navigation-animation-duration);
    timing-function: var(--sbb-navigation-animation-easing);
    property: $properties;
  }
}

:host {
  --sbb-navigation-grid-column: 1 / 5;
  --sbb-navigation-animation-duration: var(
    --sbb-disable-animation-duration,
    var(--sbb-animation-duration-3x)
  );
  --sbb-navigation-animation-easing: ease-in;
  --sbb-navigation-padding-inline: var(--sbb-layout-base-offset-responsive);
  --sbb-navigation-padding-block-start: var(--sbb-spacing-responsive-l);
  --sbb-navigation-padding-block-end: var(--sbb-spacing-responsive-xl);
  --sbb-navigation-backdrop-visibility: hidden;
  --sbb-navigation-backdrop-pointer-events: none;
  --sbb-navigation-backdrop-color: var(--sbb-color-black-alpha-70);
  --sbb-navigation-backdrop-animation-name: backdrop-open;
  --sbb-navigation-list-margin-block-start: var(--sbb-spacing-responsive-xxl);
  --sbb-navigation-inline-start: 0;
  --sbb-navigation-expanded-width: 100%;
  --sbb-navigation-inset: 0 auto auto 0;
  --sbb-navigation-transform: translateX(-100%);
  --sbb-navigation-content-transform: translateX(0);
  --sbb-navigation-width: 100%;
  --sbb-navigation-height: 100dvh;
  --sbb-focus-outline-color: var(--sbb-focus-outline-color-dark);

  display: none;
  position: fixed;
  inset: var(--sbb-navigation-inset);
  z-index: var(--sbb-navigation-z-index, var(--sbb-overlay-default-z-index));
  overflow: hidden;

  @include sbb.mq($from: medium) {
    --sbb-navigation-grid-column: 1 / 9;
  }

  @include sbb.mq($from: large) {
    --sbb-navigation-grid-column: 1 / 5;
    --sbb-navigation-animation-duration: var(
      --sbb-disable-animation-duration,
      var(--sbb-animation-duration-6x)
    );
    --sbb-navigation-padding-block-start: var(--sbb-spacing-responsive-xl);
    --sbb-navigation-padding-inline: var(--sbb-layout-base-offset-responsive) 0;
    --sbb-navigation-list-margin-block-start: var(--sbb-spacing-fixed-1x);
    --sbb-navigation-inline-start: calc(var(--sbb-layout-base-offset-responsive) * -1);
    --sbb-navigation-width: calc(100% + var(--sbb-layout-base-offset-responsive));
  }

  @include sbb.mq($from: ultra) {
    --sbb-navigation-grid-column: 1 / 6;
    --sbb-navigation-padding-block-start: var(--sbb-spacing-responsive-xxl);
  }
}

:host([data-state]:not([data-state='closed'])) {
  display: block;
}

:host([data-state='opened']) {
  --sbb-navigation-animation-easing: ease-out;
}

:host(:is([data-state='opened'], [data-state='opening'])) {
  --sbb-navigation-backdrop-visibility: visible;
  --sbb-navigation-backdrop-pointer-events: all;
}

:host(:not([data-state='closed'])) {
  --sbb-navigation-inset: 0;
  --sbb-navigation-transform: translateX(0);
}

:host([data-state][data-state='closing']) {
  --sbb-navigation-backdrop-animation-name: backdrop-close;
}

:host([data-has-navigation-section]) {
  --sbb-navigation-content-transform: translateX(-100%);

  @include sbb.mq($from: 'large') {
    --sbb-navigation-expanded-width: 100dvw;
    --sbb-navigation-content-transform: translateX(0%);
  }
}

:host([data-resize-disable-animation]) {
  @include sbb.disable-animation;
}

.sbb-navigation__container {
  @include sbb.grid-base;

  padding-inline: 0;
  pointer-events: none;
  transform: var(--sbb-navigation-transform);

  @include sbb.mq($from: large) {
    padding-inline: var(--sbb-layout-base-offset-responsive);

    // Navigation backdrop (not visible on mobile)
    &::before {
      @include transition(visibility);

      animation: {
        name: var(--sbb-navigation-backdrop-animation-name);
        duration: var(--sbb-navigation-animation-duration);
        timing-function: var(--sbb-navigation-animation-easing);
      }

      content: '';
      visibility: var(--sbb-navigation-backdrop-visibility);
      pointer-events: var(--sbb-navigation-backdrop-pointer-events);
      position: fixed;
      inset: var(--sbb-navigation-inset);
      background-color: var(--sbb-navigation-backdrop-color);
    }
  }
}

.sbb-navigation {
  @include transition(width);

  display: none;
  width: var(--sbb-navigation-width);
  grid-column: var(--sbb-navigation-grid-column);
  padding: 0;
  margin: 0;
  position: relative;
  inset-inline-start: var(--sbb-navigation-inline-start);
  inset-block-start: 0;
  border: none;
  pointer-events: none;
  height: var(--sbb-navigation-height);
  color: var(--sbb-color-white);
  background-color: var(--sbb-color-midnight);

  &::before {
    @include transition(width);

    content: '';
    position: absolute;
    width: var(--sbb-navigation-expanded-width);
    height: var(--sbb-navigation-height);
    background: var(--sbb-color-midnight);
  }

  :host([data-state]:not([data-state='closed'])) & {
    display: block;
    pointer-events: all;

    animation: {
      name: open;
      duration: var(--sbb-navigation-animation-duration);
      timing-function: var(--sbb-navigation-animation-easing);
    }
  }

  :host([data-state][data-state='closing']) & {
    pointer-events: none;
    animation-name: close;
  }

  @include sbb.if-forced-colors {
    outline: var(--sbb-border-width-1x) solid CanvasText;
  }
}

.sbb-navigation__wrapper {
  outline: none;
}

.sbb-navigation__header {
  @include transition(width);

  display: flex;
  justify-content: flex-end;
  position: absolute;
  width: var(--sbb-navigation-expanded-width);
  pointer-events: none;
  padding: var(--sbb-spacing-responsive-xs);
  z-index: calc(var(--sbb-navigation-z-index, var(--sbb-overlay-default-z-index)) + 1);
}

.sbb-navigation__close {
  pointer-events: all;
}

.sbb-navigation__content {
  @include transition(transform);
  @include sbb.scrollbar($negative: true);

  & {
    display: flex;
    flex-direction: column;
    gap: var(--sbb-spacing-responsive-xxl);
    position: relative;
    height: var(--sbb-navigation-height);
    padding-inline: var(--sbb-navigation-padding-inline);
    padding-block: var(--sbb-navigation-padding-block-start) var(--sbb-navigation-padding-block-end);
    overflow-y: auto;
    transform: var(--sbb-navigation-content-transform);
  }
}

::slotted(:first-child) {
  margin-block-start: var(--sbb-navigation-list-margin-block-start);
}

@keyframes open {
  from {
    transform: translateX(-100%);
  }

  to {
    transform: translateX(0%);
  }
}

@keyframes close {
  from {
    transform: translateX(0%);
  }

  to {
    transform: translateX(-100%);
  }
}

@keyframes backdrop-open {
  from {
    background-color: transparent;
  }
}

@keyframes backdrop-close {
  to {
    background-color: transparent;
  }
}
