@use '../../core/styles' as sbb;

// Box-sizing rules contained in typography are not traversing Shadow DOM boundaries. We need to include box-sizing mixin in every component.
@include sbb.box-sizing;

:host {
  --sbb-option-color: var(--sbb-color-charcoal);
  --sbb-option-background-color: inherit;
  --sbb-option-background-color-hover: var(--sbb-color-milk);
  --sbb-option-background-color-active: var(--sbb-color-cloud);
  --sbb-option-disabled-border-color: var(--sbb-color-graphite);
  --sbb-option-disabled-background-color: var(--sbb-color-milk);
  --sbb-option-padding-inline: var(--sbb-spacing-responsive-xxxs);
  --sbb-option-min-height: var(--sbb-size-element-s);
  --sbb-option-column-gap: var(--sbb-spacing-responsive-xxxs);
  --sbb-option-justify-content: start;
  --sbb-option-cursor: pointer;
  --sbb-option-border-radius: var(--sbb-border-radius-4x);
  --sbb-option-icon-color: var(--sbb-color-metal);
  --sbb-option-focus-outline-color: transparent;
  --sbb-option-focus-outline-inset: var(--sbb-spacing-fixed-1x);

  display: block;
}

:host([data-negative]) {
  --sbb-option-color: var(--sbb-color-milk);
  --sbb-option-icon-color: var(--sbb-color-smoke);
  --sbb-option-background-color-hover: var(--sbb-color-charcoal);
  --sbb-option-background-color-active: var(--sbb-color-iron);
  --sbb-option-disabled-border-color: var(--sbb-color-smoke);
  --sbb-option-disabled-background-color: var(--sbb-color-charcoal);
  --sbb-focus-outline-color: var(--sbb-focus-outline-color-dark);
}

:host(:hover:not([disabled], [data-group-disabled])) {
  @include sbb.hover-mq($hover: true) {
    --sbb-option-background-color: var(--sbb-option-background-color-hover);
  }
}

:host(:active:not([disabled], [data-group-disabled])) {
  --sbb-option-background-color: var(--sbb-option-background-color-active);
}

// If highlighting is enabled, hide the original slot content
:host(:not([data-disable-highlight])) {
  .sbb-option__label slot {
    display: none;
  }
}

:host(:is([data-group-disabled], [disabled])) {
  --sbb-option-cursor: default;

  @include sbb.if-forced-colors {
    --sbb-option-color: GrayText;
  }
}

:host([data-variant='select']) {
  --sbb-option-column-gap: var(--sbb-spacing-fixed-2x);
  --sbb-option-justify-content: space-between;
}

:host([data-variant='select'][data-multiple]) {
  --sbb-option-justify-content: start;
}

:host([data-active]) {
  --sbb-option-focus-outline-color: var(--sbb-focus-outline-color);
}

.sbb-option__label--highlight {
  :host(:not(:is([disabled], [data-group-disabled]))) & {
    @include sbb.text--bold;
    @include sbb.if-forced-colors {
      color: Highlight;
    }
  }
}

.sbb-option__container {
  background-color: var(--sbb-option-background-color);
}

.sbb-option {
  @include sbb.text-s--regular;

  position: relative;
  display: flex;
  min-height: var(--sbb-option-min-height);
  align-items: center;
  column-gap: var(--sbb-option-column-gap);
  padding-inline: var(--sbb-option-padding-inline);
  justify-content: var(--sbb-option-justify-content);
  color: var(--sbb-option-color);
  cursor: var(--sbb-option-cursor);
  -webkit-tap-highlight-color: transparent;
  -webkit-text-fill-color: var(--sbb-option-color);

  // We use the pseudo element to display the focus outline (inline in this case)
  &::after {
    content: '';
    display: block;
    position: absolute;
    inset: var(--sbb-option-focus-outline-inset);
    pointer-events: none;
    border: var(--sbb-focus-outline-width) solid var(--sbb-option-focus-outline-color);
    border-radius: var(--sbb-option-border-radius);
  }

  // Add inner border and background for disabled option when it's not multiple
  :host(:is([data-group-disabled], [disabled]):not([data-multiple])) & {
    position: relative;
    z-index: 0;

    &::before {
      content: '';
      display: block;
      position: absolute;
      inset: #{sbb.px-to-rem-build(6)};
      border: var(--sbb-border-width-1x) dashed var(--sbb-option-disabled-border-color);
      border-radius: var(--sbb-border-radius-2x);
      background-color: var(--sbb-option-disabled-background-color);
      z-index: -1;

      @include sbb.if-forced-colors {
        border-color: GrayText;
      }
    }
  }
}

.sbb-option__icon {
  display: flex;
  min-width: var(--sbb-size-icon-ui-small);
  min-height: var(--sbb-size-icon-ui-small);
  color: var(--sbb-option-icon-color);

  :host(:not([data-slot-names~='icon'], [icon-name])) & {
    // Can be overridden by the 'preserve-icon-space' on the autocomplete
    display: var(--sbb-option-icon-container-display, none);
  }
}

.sbb-option__label {
  white-space: initial;
}
