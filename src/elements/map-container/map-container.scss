@use '../core/styles' as sbb;

:host {
  display: block;

  --sbb-map-container-map-height-zero: #{sbb.px-to-rem-build(295)};
  --sbb-map-container-map-height-small: #{sbb.px-to-rem-build(320)};
  --sbb-map-container-sidebar-width: #{sbb.px-to-rem-build(400)};
  --sbb-map-container-sidebar-background-color: var(--sbb-background-color-1);
  --sbb-map-container-border-radius: var(--sbb-border-radius-4x);
  --sbb-map-container-animation-duration: var(
    --sbb-disable-animation-duration,
    var(--sbb-animation-duration-4x)
  );
  --sbb-map-container-map-height: calc(
    var(--sbb-map-container-map-height-zero) + var(--sbb-map-container-border-radius)
  );
  --sbb-map-container-mobile-sticky-block-start: 0;

  @include sbb.mq($from: small) {
    --sbb-map-container-map-height: calc(
      var(--sbb-map-container-map-height-small) + var(--sbb-map-container-border-radius)
    );
  }

  @include sbb.mq($from: ultra) {
    --sbb-map-container-sidebar-width: #{sbb.px-to-rem-build(480)};
  }
}

.sbb-map-container {
  display: grid;
  grid-template-rows: auto auto;

  @include sbb.mq($from: large) {
    grid-template-columns: max(var(--sbb-map-container-sidebar-width)) calc(
        100% - var(--sbb-map-container-sidebar-width)
      );
    position: fixed;
    inset: var(--sbb-map-container-margin-start, var(--sbb-header-height)) 0 0 0;
  }
}

.sbb-map-container__sidebar-button {
  position: fixed;
  left: 50%;
  inset-block-end: var(--sbb-spacing-fixed-5x);
  visibility: hidden;
  opacity: 0;
  transform: translateX(-50%) translateY(calc(100% + var(--sbb-spacing-fixed-5x)));

  // Hide transition, visibility should be delayed
  transition:
    opacity var(--sbb-map-container-animation-duration) var(--sbb-animation-easing),
    visibility var(--sbb-map-container-animation-duration) var(--sbb-animation-easing)
      var(--sbb-map-container-animation-duration),
    transform var(--sbb-map-container-animation-duration) var(--sbb-animation-easing);

  :host([data-scroll-up-button-visible]) & {
    // Show transition
    transition:
      visibility var(--sbb-map-container-animation-duration) var(--sbb-animation-easing),
      opacity var(--sbb-map-container-animation-duration) var(--sbb-animation-easing),
      transform var(--sbb-map-container-animation-duration) ease-out;
    visibility: visible;
    opacity: 1;
    transform: translateX(-50%) translateY(0);
  }

  @include sbb.mq($from: large) {
    display: none;
  }
}

.sbb-map-container__sidebar {
  @include sbb.scrollbar($size: thick, $track-visible: true);

  & {
    grid-column: 1 / 3;
    grid-row: 2 / 3;
    width: 100%;
    overflow: hidden auto;
    position: relative;
    border-start-end-radius: var(--sbb-map-container-border-radius);
    border-start-start-radius: var(--sbb-map-container-border-radius);
    margin-block-start: calc(var(--sbb-map-container-border-radius) * -1);
    background-color: var(--sbb-map-container-sidebar-background-color);

    @include sbb.mq($from: large) {
      grid-column: 1 / 2;
      grid-row: 1 / 3;
      border-radius: 0;
      margin-block-start: 0;
      border-block-start: var(--sbb-border-width-1x) solid var(--sbb-border-color-4-inverted);
    }
  }
}

.sbb-map-container__map {
  position: sticky;
  inset-block-start: 0;
  inset-inline: 0;
  grid-row: 1 / 2;
  grid-column: 1 / 3;

  // We use "to: large" to avoid resetting the styles
  @include sbb.mq($to: large) {
    inset-block-start: var(--sbb-map-container-mobile-sticky-block-start);
    height: var(--sbb-map-container-map-height);
  }

  @include sbb.mq($from: large) {
    grid-row: 1 / 3;
    grid-column: 2 / 3;
    position: relative;
  }
}
