@use '../../core/styles' as sbb;

// Box-sizing rules contained in typography are not traversing Shadow DOM boundaries. We need to include box-sizing mixin in every component.
@include sbb.box-sizing;

:host {
  display: block;

  --sbb-toggle-width: fit-content;
  --sbb-toggle-min-width: calc(
    var(--sbb-toggle-padding-inline) * 2 + var(--sbb-size-icon-ui-small)
  );
  --sbb-toggle-selected-option-border-color: var(--sbb-color-smoke);
  --sbb-toggle-padding-inline: var(--sbb-spacing-responsive-xxxs);
  --sbb-toggle-animation-duration: var(
    --sbb-disable-animation-duration,
    var(--sbb-animation-duration-6x)
  );
  --sbb-toggle-height: #{sbb.px-to-rem-build(28)};
  --sbb-toggle-border-width: var(--sbb-border-width-1x);
  --sbb-toggle-border-style: solid;
  --sbb-toggle-border-radius: var(--sbb-border-radius-infinity);

  @include sbb.mq($from: medium) {
    --sbb-toggle-height: #{sbb.px-to-rem-build(32)};
  }

  @include sbb.if-forced-colors {
    --sbb-toggle-selected-option-border-color: Highlight;
    --sbb-toggle-border-width: var(--sbb-border-width-2x);
  }
}

:host([even]) {
  --sbb-toggle-width: 100%;

  ::slotted(sbb-toggle-option) {
    width: 50%;
  }
}

:host(:disabled) {
  --sbb-toggle-selected-option-border-color: var(--sbb-color-graphite);
  --sbb-toggle-border-style: dashed;

  @include sbb.if-forced-colors {
    --sbb-toggle-border-style: solid;
    --sbb-toggle-selected-option-border-color: GrayText;
  }
}

:host([size='m']) {
  --sbb-toggle-padding-inline: var(--sbb-spacing-responsive-xs);
  --sbb-toggle-height: #{sbb.px-to-rem-build(44)};

  @include sbb.mq($from: medium) {
    --sbb-toggle-height: #{sbb.px-to-rem-build(52)};
  }
}

:host([data-disable-animation-on-resizing]) {
  @include sbb.disable-animation;
}

.sbb-toggle {
  @include sbb.text-m--regular;

  position: relative;
  display: flex;
  align-items: center;
  width: var(--sbb-toggle-width);
  max-width: 100%;
  min-width: calc(var(--sbb-toggle-min-width) * 2);
  height: var(--sbb-toggle-height);
  user-select: none;
  -webkit-tap-highlight-color: transparent;
  background: var(--sbb-color-cloud);
  border-radius: var(--sbb-toggle-border-radius);

  &::after {
    content: '';
    padding-inline: var(--sbb-toggle-padding-inline);
    display: inline-block;
    opacity: 1;
    background-color: var(--sbb-color-white);
    border: var(--sbb-toggle-border-width) var(--sbb-toggle-border-style)
      var(--sbb-toggle-selected-option-border-color);
    border-radius: var(--sbb-toggle-border-radius);
    position: absolute;
    max-width: 100%;
    min-width: var(--sbb-toggle-min-width);

    // Selected option exceeds toggle dimensions by 2x border width
    inset-block: calc(-2 * var(--sbb-toggle-border-width));
    inset-inline: calc(var(--sbb-toggle-option-left) - #{sbb.px-to-rem-build(2)})
      calc(var(--sbb-toggle-option-right) - #{sbb.px-to-rem-build(2)});
    transition: {
      duration: var(--sbb-toggle-animation-duration);
      timing-function: ease;
      property: opacity, inset-inline-end, inset-inline-start;
    }
  }

  @include sbb.if-forced-colors {
    outline: var(--sbb-toggle-border-width) solid CanvasText;
  }
}
