@use '../../core/styles' as sbb;

$disabled: '[disabled], :disabled, [disabled-interactive]';

// Box-sizing rules contained in typography are not traversing Shadow DOM boundaries. We need to include box-sizing mixin in every component.
@include sbb.box-sizing;

:host {
  // Use !important here to not interfere with Firefox focus ring definition
  // which appears in normalize CSS of several frameworks.
  outline: none !important;

  --sbb-menu-action-border-radius: var(--sbb-border-radius-infinity);
  --sbb-menu-action-outer-horizontal-padding: var(--sbb-spacing-fixed-3x);
  --sbb-menu-action-outer-vertical-padding: var(--sbb-spacing-fixed-1x);
  --sbb-menu-action-gap: var(--sbb-spacing-fixed-2x);
  --sbb-menu-action-cursor: pointer;
  --sbb-menu-action-color: var(--sbb-color-white);
  --sbb-menu-action-forced-color-border-color: CanvasText;
  --sbb-menu-action-content-padding-inline: var(--sbb-spacing-fixed-2x);
  --sbb-menu-action-content-padding-block: var(--sbb-spacing-fixed-1x);

  display: block;
}

:host(:hover:not(#{$disabled})) {
  @include sbb.hover-mq($hover: true) {
    --sbb-menu-background-color: var(--sbb-color-iron);
    --sbb-menu-action-forced-color-border-color: Highlight;
  }
}

:host(:is(#{$disabled})) {
  --sbb-menu-action-cursor: default;
  --sbb-menu-action-color: var(--sbb-color-graphite);
  --sbb-menu-action-forced-color-border-color: GrayText;

  pointer-events: none;
  cursor: default;

  @include sbb.if-forced-colors {
    --sbb-menu-action-color: GrayText;
  }
}

:host([data-button]) {
  @include sbb.if-forced-colors {
    --sbb-menu-action-color: ButtonText;
  }
}

:host([sbb-badge]:not([icon-name], [data-slot-names~='icon']))::after {
  inset: 50%
    calc(
      100% - var(--sbb-menu-action-outer-horizontal-padding) - var(
          --sbb-menu-action-content-padding-inline
        ) -
        0.5 * var(--sbb-size-icon-ui-small)
    )
    auto auto !important;
  translate: 50% -50%;
}

:host([sbb-badge]:is([icon-name], [data-slot-names~='icon']))::after {
  inset: calc(
      var(--sbb-menu-action-outer-vertical-padding) + var(--sbb-menu-action-content-padding-block) +
        var(--sbb-badge-position-offset)
    )
    calc(
      100% - var(--sbb-menu-action-outer-horizontal-padding) - var(
          --sbb-menu-action-content-padding-inline
        ) - var(--sbb-size-icon-ui-small) +
        var(--sbb-badge-position-offset)
    )
    auto auto !important;
}

:is(.sbb-menu-button, .sbb-menu-link) {
  text-decoration: none;
  display: block;
  width: 100%;
  color: var(--sbb-menu-action-color);
  padding: var(--sbb-menu-action-outer-vertical-padding)
    var(--sbb-menu-action-outer-horizontal-padding);
  cursor: var(--sbb-menu-action-cursor);
  outline: none;
}

.sbb-menu-action__content {
  @include sbb.text-xs--regular;

  display: flex;
  align-items: center;
  gap: var(--sbb-menu-action-gap);
  padding: var(--sbb-menu-action-content-padding-block)
    var(--sbb-menu-action-content-padding-inline);
  border-radius: var(--sbb-menu-action-border-radius);
  user-select: none;
  -webkit-tap-highlight-color: transparent;
  background-color: var(--sbb-menu-background-color);

  // Hide focus outline when focus origin is mouse or touch. This is being used as a workaround in various components.
  // Handle focus on the host (button variant)
  :host(:focus-visible:not([data-focus-origin='mouse'], [data-focus-origin='touch'])) & ,
  // Handle focus on the action (link variant)
  :host(:not([data-focus-origin='mouse'], [data-focus-origin='touch'])) :focus-visible & {
    --sbb-focus-outline-color: var(--sbb-focus-outline-color-dark);

    @include sbb.focus-outline;
  }

  @include sbb.if-forced-colors {
    border: var(--sbb-border-width-2x) solid var(--sbb-menu-action-forced-color-border-color);
  }
}

.sbb-menu-action__icon {
  display: flex;
  min-width: var(--sbb-size-icon-ui-small);
  min-height: var(--sbb-size-icon-ui-small);
}

.sbb-menu-action__label {
  @include sbb.ellipsis;

  :host(:is(#{$disabled})) & {
    text-decoration: line-through;
  }
}

.sbb-menu-action__amount {
  @include sbb.badge;

  flex-shrink: 0;
  margin-inline-start: auto;

  @include sbb.if-forced-colors {
    color: var(--sbb-menu-action-color);
  }
}
