@use '../../core/styles' as sbb;

// Box-sizing rules contained in typography are not traversing Shadow DOM boundaries. We need to include box-sizing mixin in every component.
@include sbb.box-sizing;

:host {
  // We use this rule to make the inner container element to appear as if it were a
  // direct child of the host's parent element. This is useful because the host
  // should be ignored when using CSS grid or similar layout techniques.
  display: contents;

  --sbb-menu-position-x: 0;
  --sbb-menu-position-y: 0;
  --sbb-menu-animation-duration: var(
    --sbb-disable-animation-duration,
    var(--sbb-animation-duration-6x)
  );
  --sbb-menu-animation-easing: ease;
  --sbb-menu-transform-y: 100%;
  --sbb-menu-transform-x: 0%;
  --sbb-menu-max-width: 100%;
  --sbb-menu-min-width: 100%;
  --sbb-menu-inset: 0 auto auto 0;
  --sbb-menu-container-height: 100dvh;

  // 85vh is not an exact value but looks optimized for mobile view.
  --sbb-menu-max-height: calc(85vh - var(--sbb-spacing-fixed-8x));
  --sbb-menu-min-height: #{sbb.px-to-rem-build(48.5)};
  --sbb-menu-border-radius: var(--sbb-border-radius-4x);
  --sbb-menu-visibility: hidden;
  --sbb-menu-backdrop-color: transparent;
  --sbb-menu-color: var(--sbb-color-2-inverted);
  --sbb-menu-background-color: var(--sbb-background-color-1-inverted);
  --sbb-focus-outline-color: var(--sbb-focus-outline-color-dark);

  @include sbb.scrollbar-variables($negative: true);

  @include sbb.mq($from: large) {
    --sbb-menu-transform-y: var(--sbb-spacing-fixed-2x);
    --sbb-menu-max-width: #{sbb.px-to-rem-build(320)};
    --sbb-menu-min-width: #{sbb.px-to-rem-build(180)};
    --sbb-menu-back-button-display: none;
  }
}

:host(:is([data-state='opened'], [data-state='opening'])) {
  --sbb-menu-visibility: visible;
  --sbb-menu-backdrop-color: color-mix(in srgb, var(--sbb-color-black) 20%, transparent);

  @include sbb.mq($from: large) {
    --sbb-menu-backdrop-color: transparent;
  }
}

:host(:not(:state(nested))) {
  --sbb-menu-back-button-display: none;
}

:host(:not([data-state='closed'])) {
  --sbb-menu-inset: 0;
}

:host(:state(dark)) {
  --sbb-focus-outline-color: var(--sbb-focus-outline-color-default);

  // We have to ensure that the scrollbar is visible in dark mode with non-dark mode values.
  --sbb-scrollbar-color: color-mix(in srgb, var(--sbb-color-black) 30%, transparent);
  --sbb-scrollbar-color-hover: color-mix(in srgb, var(--sbb-color-black) 60%, transparent);
}

@include sbb.mq($to: medium) {
  :host(:state(skip-animation)) {
    --sbb-menu-animation-duration: 0ms;
  }

  :host(:state(nested-child)) {
    --sbb-menu-transform-x: -100%;
  }

  :host(:state(nested)[data-state]:not([data-state='closed'])) {
    --sbb-menu-open-animation-name: open-sideways;
  }

  :host([data-state][data-state='closing']:state(nested):not(:state(close-all))) {
    --sbb-menu-close-animation-name: close-sideways;
  }
}

::slotted(:not(sbb-menu-button, sbb-menu-link, sbb-divider)) {
  display: block;
  padding-inline: var(--sbb-spacing-fixed-5x);
}

sbb-divider,
::slotted(sbb-divider) {
  --sbb-divider-color: var(--sbb-background-color-4-inverted);

  margin-block: var(--sbb-spacing-fixed-2x);
}

sbb-divider,
#sbb-menu__back-button {
  display: var(--sbb-menu-back-button-display, block);
}

.sbb-menu__container {
  position: fixed;
  pointer-events: none;
  inset: var(--sbb-menu-inset);
  height: var(--sbb-menu-container-height);
  z-index: var(--sbb-menu-z-index, var(--sbb-overlay-default-z-index));

  // Menu backdrop (only visible on mobile)
  &::before {
    content: '';
    visibility: var(--sbb-menu-visibility);
    pointer-events: all;
    position: fixed;
    inset: var(--sbb-menu-inset);
    height: var(--sbb-menu-container-height);
    background-color: var(--sbb-menu-backdrop-color);
    transition: {
      duration: var(--sbb-menu-animation-duration);
      timing-function: var(--sbb-menu-animation-easing);
      property: background-color, visibility;
    }

    // Hide the backdrop when in nested state
    :host(:state(nested)) & {
      display: none;
    }
  }
}

.sbb-menu {
  display: none;
  opacity: 0;
  pointer-events: none;
  max-width: var(--sbb-menu-max-width);
  min-width: var(--sbb-menu-min-width);
  text-align: start;
  position: absolute;
  inset-inline-start: 0;
  inset-block-start: unset;
  inset-block-end: 0;
  inset-inline-end: unset;
  color: var(--sbb-menu-color);
  border: none;
  border-radius: var(--sbb-menu-border-radius) var(--sbb-menu-border-radius) 0 0;
  background-color: var(--sbb-menu-background-color);
  padding: 0;
  overflow: hidden;
  translate: var(--sbb-menu-transform-x) 0;

  // Used when navigating back from nested menu in mobile view
  transition: translate var(--sbb-menu-animation-duration);

  :host([data-state]:not([data-state='closed'])) & {
    display: block;
    opacity: 1;
    pointer-events: all;

    animation: {
      name: var(--sbb-menu-open-animation-name, open);
      duration: var(--sbb-menu-animation-duration);
      timing-function: var(--sbb-menu-animation-easing);
    }
  }

  :host([data-state][data-state='closing']) & {
    pointer-events: none;
    animation-name: var(--sbb-menu-close-animation-name, close);
  }

  @include sbb.if-forced-colors {
    outline: var(--sbb-border-width-1x) solid CanvasText;
  }

  @include sbb.mq($from: large) {
    top: 0;
    bottom: unset;
    left: 0;
    right: unset;
    max-height: fit-content;
    border-radius: var(--sbb-menu-border-radius);

    :host(:not([data-state='closed'])) & {
      top: var(--sbb-menu-position-y);
      left: var(--sbb-menu-position-x);
      max-height: var(--sbb-menu-max-height);
      min-height: var(--sbb-menu-min-height);
    }
  }
}

.sbb-menu__content {
  @include sbb.scrollbar-rules;

  & {
    max-height: var(--sbb-menu-max-height);
    padding-block: var(--sbb-spacing-fixed-1x);
    overflow: auto;
    outline: none;
  }

  // Margin bottom in mobile variant
  &::after {
    content: '';
    display: block;
    height: var(--sbb-spacing-fixed-8x);
  }

  @include sbb.mq($from: large) {
    max-height: fit-content;

    :host(:not([data-state='closed'])) & {
      max-height: var(--sbb-menu-max-height);
      min-height: var(--sbb-menu-min-height);
    }

    &::after {
      display: none;
    }
  }
}

.sbb-menu-list {
  @include sbb.list-reset;
}

::slotted(:is([data-sbb-link], [data-sbb-button])) {
  // As the background turns white, we need to ensure that buttons and links are displayed in positive.
  color-scheme: only light;
}

@keyframes open {
  from {
    opacity: 0;
    translate: 0 var(--sbb-menu-transform-y);
  }

  to {
    opacity: 1;
    translate: 0 0;
  }
}

@keyframes close {
  from {
    opacity: 1;
    translate: 0 0;
  }

  to {
    opacity: 0;
    translate: 0 var(--sbb-menu-transform-y);
  }
}

@keyframes open-sideways {
  from {
    translate: 100% 0;
  }

  to {
    translate: 0 0;
  }
}

@keyframes close-sideways {
  from {
    translate: 0 0;
  }

  to {
    translate: 100% 0;
  }
}
