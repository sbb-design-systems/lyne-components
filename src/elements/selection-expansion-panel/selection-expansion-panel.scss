@use '../core/styles' as sbb;

// Open/Close animation vars
$open-anim-rows-from: 0fr;
$open-anim-rows-to: 1fr;
$open-anim-opacity-from: 0;
$open-anim-opacity-to: 1;

:host {
  --sbb-selection-expansion-panel-background: var(--sbb-background-color-1);
  --sbb-selection-expansion-panel-border-color: var(--sbb-border-color-4-inverted);

  // Variable used to override background color of selection panels.
  --sbb-selection-panel-inner-background: transparent;

  // Variable used to override border width of selection panels.
  --sbb-selection-panel-inner-border-width: 0px;
  --sbb-selection-expansion-panel-animation-duration: var(
    --sbb-disable-animation-duration,
    var(--sbb-animation-duration-4x)
  );
  --sbb-selection-expansion-panel-border-width: var(--sbb-border-width-1x);
  --sbb-selection-expansion-panel-content-visibility: hidden;
  --sbb-selection-expansion-panel-content-padding-inline: var(--sbb-spacing-responsive-xxs);
  --sbb-selection-expansion-panel-border-radius: var(--sbb-border-radius-4x);

  // As the selection panel has always a white/milk background, we have to fix the focus outline color
  // to default color for cases where the selection panel is used in a negative context.
  --sbb-focus-outline-color: light-dark(
    var(--sbb-focus-outline-color-default),
    var(--sbb-focus-outline-color-dark)
  );

  display: contents;
}

:host([data-size='s']) {
  --sbb-selection-expansion-panel-content-padding-inline: var(--sbb-spacing-responsive-xxxs);
}

:host([color='milk']) {
  --sbb-selection-expansion-panel-background: var(--sbb-background-color-3);
}

// :where is to align specificity
:host(:where(:state(checked)):not(:where(:state(disabled)))) {
  --sbb-selection-expansion-panel-border-color: var(--sbb-border-color-3);
  --sbb-selection-expansion-panel-border-width: var(--sbb-border-width-2x);
}

// :where is to align specificity
:host(:state(slotted-content):where(:state(disabled))) {
  --sbb-selection-expansion-panel-border-color: var(--sbb-border-color-4-inverted);
}

// :where is to align specificity
:host([borderless]:not(:where(:state(checked)))) {
  --sbb-selection-expansion-panel-border-color: transparent;
}

:host(:state(slotted-content):where([data-state='opening'], [data-state='opened'])) {
  --sbb-selection-expansion-panel-content-visibility: visible;
  --sbb-selection-expansion-panel-content-padding-block-end: var(--sbb-spacing-responsive-xs);
}

.sbb-selection-expansion-panel {
  flex: auto;
  position: relative;
  width: 100%;
  background-color: var(--sbb-selection-expansion-panel-background);
  border-radius: var(--sbb-selection-expansion-panel-border-radius);

  // To provide a smooth transition of width, we use box-shadow to imitate border.
  box-shadow: inset 0 0 0 var(--sbb-selection-expansion-panel-border-width)
    var(--sbb-selection-expansion-panel-border-color);

  transition: {
    duration: var(--sbb-selection-expansion-panel-animation-duration);
    timing-function: var(--sbb-animation-easing);
    property: box-shadow;
  }

  // For high contrast mode we need a real border
  @include sbb.if-forced-colors {
    &::after {
      content: '';
      display: block;
      position: absolute;
      inset: 0;
      pointer-events: none;
      border: var(--sbb-selection-expansion-panel-border-width) solid
        var(--sbb-selection-expansion-panel-border-color);
      border-radius: var(--sbb-selection-expansion-panel-border-radius);
    }
  }
}

.sbb-selection-expansion-panel__content--wrapper {
  display: grid;
  visibility: var(--sbb-selection-expansion-panel-content-visibility);
  grid-template-rows: #{$open-anim-rows-from};
  opacity: #{$open-anim-opacity-from};

  :host([data-state='opened']) & {
    grid-template-rows: #{$open-anim-rows-to};
    opacity: #{$open-anim-opacity-to};
  }

  :host([data-state='opening']) & {
    animation-name: open, open-opacity;
    animation-fill-mode: forwards;
    animation-duration: var(--sbb-selection-expansion-panel-animation-duration);
    animation-timing-function: var(--sbb-animation-easing);
    animation-delay: 0s, var(--sbb-selection-expansion-panel-animation-duration);
  }

  :host([data-state='closing']) & {
    animation-name: close;
    animation-duration: var(--sbb-selection-expansion-panel-animation-duration);
    animation-timing-function: var(--sbb-animation-easing);
  }

  :host(:not(:state(slotted-content))) & {
    display: none;
  }
}

.sbb-selection-expansion-panel__content {
  overflow: hidden;
  padding-inline: var(--sbb-selection-expansion-panel-content-padding-inline);
  padding-block-end: var(--sbb-selection-expansion-panel-content-padding-block-end);
  transition: padding var(--sbb-selection-expansion-panel-animation-duration)
    var(--sbb-animation-easing);
}

sbb-divider {
  margin-block-end: var(--sbb-spacing-responsive-xxs);
}

@keyframes open {
  from {
    grid-template-rows: #{$open-anim-rows-from};
  }

  to {
    grid-template-rows: #{$open-anim-rows-to};
  }
}

@keyframes open-opacity {
  from {
    opacity: #{$open-anim-opacity-from};
  }

  to {
    opacity: #{$open-anim-opacity-to};
  }
}

@keyframes close {
  from {
    grid-template-rows: #{$open-anim-rows-to};
    opacity: #{$open-anim-opacity-to};
  }

  to {
    grid-template-rows: #{$open-anim-rows-from};
    opacity: #{$open-anim-opacity-from};
  }
}
