@use '@sbb-esta/lyne-elements/core/styles' as sbb;

@mixin sbb-pearl-chain-dotted {
  background-color: unset;
  background-image: linear-gradient(to right, currentcolor 0%, currentcolor 50%, Canvas 50%);
  background-repeat: repeat-x;
  background-size: calc(2 * var(--sbb-pearl-chain-spacing-small)) var(--sbb-pearl-chain-height);
  inset-inline-end: var(--sbb-pearl-chain-height);

  @include sbb.if-forced-colors {
    background: unset;
    border-block-start: #{sbb.px-to-rem-build(1)} dashed Highlight;
    transform: translateY(#{sbb.px-to-rem-build(1)});
  }
}

// Box-sizing rules contained in typography are not traversing Shadow DOM boundaries. We need to include box-sizing mixin in every component.
@include sbb.box-sizing;

:host {
  --sbb-pearl-chain-height: var(--sbb-border-width-2x);
  --sbb-pearl-chain-spacing-small: #{sbb.px-to-rem-build(2)};
  --sbb-pearl-chain-color: var(--sbb-pearl-chain-bullet-color);
  --sbb-pearl-chain-color-disruption: var(--sbb-pearl-chain-bullet-color-disruption);
  --sbb-pearl-chain-color-past: var(--sbb-pearl-chain-bullet-color-past);
  --sbb-pearl-chain-leg-width: 100%;

  display: block;

  @include sbb.pearl-chain-bullet-variables;
}

.sbb-pearl-chain {
  position: relative;
  display: flex;
  justify-content: space-between;
  flex-wrap: nowrap;
  color: var(--sbb-pearl-chain-color);
  width: 100%;
  padding-block: calc(
    (var(--sbb-pearl-chain-bullet-size-start-end) - var(--sbb-pearl-chain-height)) / 2
  );
  padding-inline-end: var(--sbb-pearl-chain-bullet-size-start-end);
}

// first and last bullet
.sbb-pearl-chain__bullet {
  @include sbb.pearl-chain-bullet-start-end;
  @include sbb.pearl-chain-bullet;

  & {
    content: '';
    position: absolute;
    background-color: currentcolor;
    inset-block-start: 0;
    z-index: 3;
  }
}

.sbb-pearl-chain__bullet:first-of-type {
  inset-inline-start: 0;
}

.sbb-pearl-chain__bullet:last-of-type {
  inset-inline-end: 0;
}

.sbb-pearl-chain__leg {
  flex-shrink: 0;
  flex-grow: 0;
  position: relative;
  height: var(--sbb-pearl-chain-height);
  border-inline-end: var(--sbb-pearl-chain-spacing-small) solid Canvas;
  background-color: currentcolor;
  width: var(--sbb-pearl-chain-leg-width);
  display: flex;
  align-items: center;

  @include sbb.if-forced-colors {
    background-color: CanvasText;

    .sbb-pearl-chain--past & {
      background-color: GrayText;
    }
  }
}

.sbb-pearl-chain__leg:last-of-type {
  border: none;
}

// dot on leg
.sbb-pearl-chain__stop {
  position: relative;
  z-index: 2;

  @include sbb.pearl-chain-bullet;

  & {
    @include sbb.pearl-chain-bullet-stop;
  }
}

.sbb-pearl-chain__bullet--future {
  @include sbb.pearl-chain-bullet;
}

.sbb-pearl-chain__leg--past,
.sbb-pearl-chain--past,
.sbb-pearl-chain__leg--past::after,
.sbb-pearl-chain__leg--progress::after,
.sbb-pearl-chain__leg--progress .sbb-pearl-chain__stop,
.sbb-pearl-chain--progress,
.sbb-pearl-chain__bullet--past {
  color: var(--sbb-pearl-chain-color-past);

  @include sbb.pearl-chain-bullet-past;

  @include sbb.if-forced-colors {
    background-color: GrayText !important;
  }
}

.sbb-pearl-chain__bullet--progress {
  background: var(--sbb-pearl-chain-bullet-color);

  @include sbb.pearl-chain-bullet-past;
}

.sbb-pearl-chain__bullet--departure-disruption,
.sbb-pearl-chain--arrival-disruption,
.sbb-pearl-chain--departure-disruption,
.sbb-pearl-chain__leg--disruption {
  color: var(--sbb-pearl-chain-color-disruption);

  @include sbb.pearl-chain-bullet-disruption;

  @include sbb.if-forced-colors {
    color: Highlight;
    background: Highlight;
  }
}

.sbb-pearl-chain__leg--disruption .sbb-pearl-chain__stop {
  @include sbb.pearl-chain-bullet-disruption;
}

.sbb-pearl-chain__leg--past .sbb-pearl-chain__stop {
  @include sbb.pearl-chain-bullet-past;
}

.sbb-pearl-chain__leg--disruption::after {
  @include sbb-pearl-chain-dotted;
}

.sbb-pearl-chain__leg--skipped {
  color: var(--sbb-pearl-chain-color-disruption);

  &::after {
    @include sbb-pearl-chain-dotted;
  }
}

.sbb-pearl-chain__stop--departure-skipped {
  @include sbb.pearl-chain-bullet-stop;
  @include sbb.pearl-chain-bullet-skipped;
}

.sbb-pearl-chain--arrival-skipped,
.sbb-pearl-chain--departure-skipped {
  @include sbb.pearl-chain-bullet-start-end;
  @include sbb.pearl-chain-bullet-skipped;
}

// line on leg
.sbb-pearl-chain__leg::after {
  content: '';
  position: absolute;
  inset-block: 0;
  inset-inline-start: 0;
  background-color: currentcolor;
  border-radius: var(--sbb-pearl-chain-height);
  z-index: 1;

  @include sbb.if-forced-colors {
    background-color: CanvasText;

    .sbb-pearl-chain--past & {
      background-color: GrayText;
    }
  }
}

.sbb-pearl-chain__leg:last-of-type::after {
  inset-inline-end: calc(-1 * var(--sbb-pearl-chain-height));
}

.sbb-pearl-chain__leg--progress::after {
  background-color: var(--sbb-pearl-chain-color-past);

  // --sbb-pearl-chain-leg-status: defined in .ts file
  width: var(--sbb-pearl-chain-leg-status);
}

.sbb-pearl-chain__position {
  @include sbb.pearl-chain-bullet-position;

  & {
    position: absolute;
    inset-block-start: -200%;
    z-index: 4;

    // --sbb-pearl-chain-status-position: defined in .ts file
    inset-inline-start: var(--sbb-pearl-chain-status-position);
  }
}

.sbb-pearl-chain__position--no-animation {
  animation: unset;
}

.sbb-screen-reader-only {
  @include sbb.screen-reader-only;
}
