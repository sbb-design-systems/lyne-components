@use '@sbb-esta/lyne-elements/core/styles' as sbb;

// Box-sizing rules contained in typography are not traversing Shadow DOM boundaries. We need to include box-sizing mixin in every component.
@include sbb.box-sizing;

:host {
  --sbb-reservation-graphic-width: 16;
  --sbb-reservation-graphic-height: 16;
  --sbb-reservation-graphic-rotation: 0;
  --sbb-reservation-graphic-inverse-rotation: 0;
}

.sbb-sr-icon,
.sbb-sr-graphic {
  --sbb-icon-svg-width: calc(var(--sbb-reservation-graphic-width) * #{sbb.px-to-rem-build(1)});
  --sbb-icon-svg-height: calc(var(--sbb-reservation-graphic-height) * #{sbb.px-to-rem-build(1)});

  display: flex;
  justify-content: center;
  align-items: center;
  width: calc(var(--sbb-reservation-graphic-width) * #{sbb.px-to-rem-build(1)});
  height: calc(var(--sbb-reservation-graphic-height) * #{sbb.px-to-rem-build(1)});
  transform-origin: center;
  rotate: calc(var(--sbb-reservation-graphic-rotation) * 1deg);
}

.sbb-sr-icon {
  // override color directly set in the SVG file coming from CDN
  color: var(--sbb-color-granite);
}

.sbb-sr-graphic {
  svg {
    width: clamp(100%, 100%, 100%);
    height: clamp(100%, 100%, 100%);

    .fix-rotation-inverse {
      transform-origin: center;
      rotate: calc(var(--sbb-reservation-graphic-inverse-rotation) * 1deg);
    }
  }

  @include sbb.if-forced-colors {
    svg:not(.color-immutable) {
      [fill]:not([fill='none']) {
        fill: currentcolor;
      }
    }

    .no-bg {
      fill: transparent;
    }
  }
}
