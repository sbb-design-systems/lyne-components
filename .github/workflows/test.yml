name: Test
on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions: read-all

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      test-modules: ${{ steps.test-modules.outputs.result }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: yarn
      - run: yarn install --frozen-lockfile --non-interactive

      - name: Run eslint
        run: yarn lint:tsc

      - name: Preload test artifacts
        run: yarn ts-hooks scripts/preload-test-artifacts.ts

      - name: Store test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: node_modules/.cache/lyne-cdn/
          retention-days: 1

      - name: Find test modules
        uses: actions/github-script@v7
        id: test-modules
        with:
          script: |
            const path = require('path');
            const patterns = ['src/**/*.spec.ts', '!src/**/*.visual.spec.ts'];
            const globber = await glob.create(patterns.join('\n'));
            const files = await globber.glob();
            const result = files
              .map((p) => path.relative(process.cwd(), p).split('/').slice(1, 3).join('/'))
              .filter((v, i, a) => a.indexOf(v) === i)
              .sort();

            return JSON.stringify(result);
          result-encoding: string

  test:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        test-module: ${{ fromJSON(needs.setup.outputs.test-modules) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: yarn
      - run: yarn install --frozen-lockfile --non-interactive
      - name: Install browser dependencies
        run: yarn playwright install-deps
      - name: Restore test artifacts
        uses: actions/download-artifact@v4
        with:
          name: test-artifacts

      - name: Run tests
        run: yarn test --module=${{ matrix.test-module }}
        env:
          NODE_ENV: production
      - name: Assert no new snapshots (run `yarn test --ci` if this fails)
        run: git diff --exit-code
      - name: Rename coverage
        run: mv coverage/coverage-final.json coverage/coverage-${TEST_MODULE//\//-}.json
        env:
          TEST_MODULE: ${{ matrix.test-module }}
      - name: Store coverage
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: matrix-coverage-${{ hashFiles(matrix.test-module) }}
          path: coverage/
          retention-days: 1

  collect-test-results:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: yarn
      - run: yarn install --frozen-lockfile --non-interactive
      - uses: actions/download-artifact@v4

      - name: Assemble code coverage
        run: |
          mv coverage coverage-matrix
          yarn nyc report \
            --temp-dir coverage-matrix \
            --report-dir coverage \
            --reporter lcov
          rm -rf coverage-matrix
      - name: Store coverage
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/
          retention-days: 1
      - uses: codecov/codecov-action@v3
        if: github.ref == 'refs/heads/main'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: coverage
          fail_ci_if_error: true
          verbose: true
